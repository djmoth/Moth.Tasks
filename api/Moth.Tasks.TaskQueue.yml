### YamlMime:ManagedReference
items:
- uid: Moth.Tasks.TaskQueue
  commentId: T:Moth.Tasks.TaskQueue
  id: TaskQueue
  parent: Moth.Tasks
  children:
  - Moth.Tasks.TaskQueue.Clear(System.Action{System.Exception})
  - Moth.Tasks.TaskQueue.Dispose
  - Moth.Tasks.TaskQueue.Enqueue(System.Action)
  - Moth.Tasks.TaskQueue.Enqueue``1(``0@)
  - Moth.Tasks.TaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)
  - Moth.Tasks.TaskQueue.Enqueue``1(System.Action{``0},``0)
  - Moth.Tasks.TaskQueue.Finalize
  - Moth.Tasks.TaskQueue.TryRunNextTask
  - Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)
  - Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler,System.Exception@)
  - Moth.Tasks.TaskQueue.TryRunNextTask(System.Exception@)
  langs:
  - csharp
  - vb
  name: TaskQueue
  nameWithType: TaskQueue
  fullName: Moth.Tasks.TaskQueue
  type: Class
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: TaskQueue
    path: TaskQueue.cs
    startLine: 12
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nA queue of tasks, which can be run in FIFO order.\n"
  example: []
  syntax:
    content: 'public sealed class TaskQueue : IDisposable'
    content.vb: >-
      Public NotInheritable Class TaskQueue
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Moth.Tasks.TaskQueue.Finalize
  commentId: M:Moth.Tasks.TaskQueue.Finalize
  id: Finalize
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: TaskQueue.Finalize()
  fullName: Moth.Tasks.TaskQueue.Finalize()
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Finalize
    path: TaskQueue.cs
    startLine: 29
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nFinalizes an instance of the <xref href=\"Moth.Tasks.TaskQueue\" data-throw-if-not-resolved=\"false\"></xref> class. Also disposes of tasks implementing <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Moth.Tasks.TaskQueue.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Moth.Tasks.TaskQueue.Enqueue(System.Action)
  commentId: M:Moth.Tasks.TaskQueue.Enqueue(System.Action)
  id: Enqueue(System.Action)
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: Enqueue(Action)
  nameWithType: TaskQueue.Enqueue(Action)
  fullName: Moth.Tasks.TaskQueue.Enqueue(System.Action)
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Enqueue
    path: TaskQueue.cs
    startLine: 35
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nEnqueue an action to be run later.\n"
  example: []
  syntax:
    content: public void Enqueue(Action action)
    parameters:
    - id: action
      type: System.Action
      description: Action to enqueue.
    content.vb: Public Sub Enqueue(action As Action)
  overload: Moth.Tasks.TaskQueue.Enqueue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.TaskQueue.Enqueue``1(System.Action{``0},``0)
  commentId: M:Moth.Tasks.TaskQueue.Enqueue``1(System.Action{``0},``0)
  id: Enqueue``1(System.Action{``0},``0)
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: Enqueue<T>(Action<T>, T)
  nameWithType: TaskQueue.Enqueue<T>(Action<T>, T)
  fullName: Moth.Tasks.TaskQueue.Enqueue<T>(System.Action<T>, T)
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Enqueue
    path: TaskQueue.cs
    startLine: 43
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nEnqueue an action to be run later with an argument.\n"
  example: []
  syntax:
    content: public void Enqueue<T>(Action<T> action, T arg)
    parameters:
    - id: action
      type: System.Action{{T}}
      description: Action to enqueue.
    - id: arg
      type: '{T}'
      description: Argument to run <code data-dev-comment-type="paramref" class="paramref">action</code> with.
    typeParameters:
    - id: T
      description: The type of the parameter that <code data-dev-comment-type="paramref" class="paramref">action</code> encapsulates.
    content.vb: Public Sub Enqueue(Of T)(action As Action(Of T), arg As T)
  overload: Moth.Tasks.TaskQueue.Enqueue*
  nameWithType.vb: TaskQueue.Enqueue(Of T)(Action(Of T), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Moth.Tasks.TaskQueue.Enqueue(Of T)(System.Action(Of T), T)
  name.vb: Enqueue(Of T)(Action(Of T), T)
- uid: Moth.Tasks.TaskQueue.Enqueue``1(``0@)
  commentId: M:Moth.Tasks.TaskQueue.Enqueue``1(``0@)
  id: Enqueue``1(``0@)
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: Enqueue<T>(in T)
  nameWithType: TaskQueue.Enqueue<T>(in T)
  fullName: Moth.Tasks.TaskQueue.Enqueue<T>(in T)
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Enqueue
    path: TaskQueue.cs
    startLine: 50
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nEnqueue an <xref href=\"Moth.Tasks.ITask\" data-throw-if-not-resolved=\"false\"></xref> to be run later.\n"
  example: []
  syntax:
    content: >-
      public void Enqueue<T>(in T task)
          where T : struct, ITask
    parameters:
    - id: task
      type: '{T}'
      description: Task data.
    typeParameters:
    - id: T
      description: Type of task to run.
    content.vb: Public Sub Enqueue(Of T As {Structure, ITask})(ByRef task As T)
  overload: Moth.Tasks.TaskQueue.Enqueue*
  nameWithType.vb: TaskQueue.Enqueue(Of T)(ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Moth.Tasks.TaskQueue.Enqueue(Of T)(ByRef T)
  name.vb: Enqueue(Of T)(ByRef T)
- uid: Moth.Tasks.TaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)
  commentId: M:Moth.Tasks.TaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)
  id: Enqueue``1(``0@,Moth.Tasks.TaskHandle@)
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: Enqueue<T>(in T, out TaskHandle)
  nameWithType: TaskQueue.Enqueue<T>(in T, out TaskHandle)
  fullName: Moth.Tasks.TaskQueue.Enqueue<T>(in T, out Moth.Tasks.TaskHandle)
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Enqueue
    path: TaskQueue.cs
    startLine: 64
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nEnqueue an <xref href=\"Moth.Tasks.ITask\" data-throw-if-not-resolved=\"false\"></xref> to be run later, giving out a <xref href=\"Moth.Tasks.TaskHandle\" data-throw-if-not-resolved=\"false\"></xref> for checking task status.\n"
  example: []
  syntax:
    content: >-
      public void Enqueue<T>(in T task, out TaskHandle handle)
          where T : struct, ITask
    parameters:
    - id: task
      type: '{T}'
      description: Task data.
    - id: handle
      type: Moth.Tasks.TaskHandle
      description: Handle for checking task status.
    typeParameters:
    - id: T
      description: Type of task to run.
    content.vb: Public Sub Enqueue(Of T As {Structure, ITask})(ByRef task As T, ByRef handle As TaskHandle)
  overload: Moth.Tasks.TaskQueue.Enqueue*
  nameWithType.vb: TaskQueue.Enqueue(Of T)(ByRef T, ByRef TaskHandle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Moth.Tasks.TaskQueue.Enqueue(Of T)(ByRef T, ByRef Moth.Tasks.TaskHandle)
  name.vb: Enqueue(Of T)(ByRef T, ByRef TaskHandle)
- uid: Moth.Tasks.TaskQueue.TryRunNextTask
  commentId: M:Moth.Tasks.TaskQueue.TryRunNextTask
  id: TryRunNextTask
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: TryRunNextTask()
  nameWithType: TaskQueue.TryRunNextTask()
  fullName: Moth.Tasks.TaskQueue.TryRunNextTask()
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: TryRunNextTask
    path: TaskQueue.cs
    startLine: 91
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nTry to run the next task in the queue, if present.\n"
  remarks: "\nPlease note that the return value does not indicate if a task was successful. The method will return <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a task was ready in the queue, regardless if an exception occured.\n"
  example: []
  syntax:
    content: public bool TryRunNextTask()
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if a task was run, <xref uid="langword_csharp_false" name="false" href=""></xref> if the <xref href="Moth.Tasks.TaskQueue" data-throw-if-not-resolved="false"></xref> is empty.
    content.vb: Public Function TryRunNextTask As Boolean
  overload: Moth.Tasks.TaskQueue.TryRunNextTask*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)
  commentId: M:Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)
  id: TryRunNextTask(Moth.Tasks.IProfiler)
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: TryRunNextTask(IProfiler)
  nameWithType: TaskQueue.TryRunNextTask(IProfiler)
  fullName: Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: TryRunNextTask
    path: TaskQueue.cs
    startLine: 101
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nTry to run the next task in the queue, if present. Also performs profiling on the task through an <xref href=\"Moth.Tasks.IProfiler\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nPlease note that the return value does not indicate if a task was successful. The method will return <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a task was ready in the queue, regardless if an exception occured.\n"
  example: []
  syntax:
    content: public bool TryRunNextTask(IProfiler profiler)
    parameters:
    - id: profiler
      type: Moth.Tasks.IProfiler
      description: <xref href="Moth.Tasks.IProfiler" data-throw-if-not-resolved="false"></xref> to profile the run-time of the task.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if a task was run, <xref uid="langword_csharp_false" name="false" href=""></xref> if the <xref href="Moth.Tasks.TaskQueue" data-throw-if-not-resolved="false"></xref> is empty.
    content.vb: Public Function TryRunNextTask(profiler As IProfiler) As Boolean
  overload: Moth.Tasks.TaskQueue.TryRunNextTask*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.TaskQueue.TryRunNextTask(System.Exception@)
  commentId: M:Moth.Tasks.TaskQueue.TryRunNextTask(System.Exception@)
  id: TryRunNextTask(System.Exception@)
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: TryRunNextTask(out Exception)
  nameWithType: TaskQueue.TryRunNextTask(out Exception)
  fullName: Moth.Tasks.TaskQueue.TryRunNextTask(out System.Exception)
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: TryRunNextTask
    path: TaskQueue.cs
    startLine: 111
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nTry to run the next task in the queue, if present. Also provides an <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> thrown by the task in case it fails.\n"
  remarks: "\nPlease note that the return value does not indicate if a task was successful. The method will return <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a task was ready in the queue, regardless if an exception occured.\n"
  example: []
  syntax:
    content: public bool TryRunNextTask(out Exception exception)
    parameters:
    - id: exception
      type: System.Exception
      description: <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> thrown if task failed. Is <xref uid="langword_csharp_null" name="null" href=""></xref> if task was run successfully.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if a task was run, <xref uid="langword_csharp_false" name="false" href=""></xref> if the <xref href="Moth.Tasks.TaskQueue" data-throw-if-not-resolved="false"></xref> is empty.
    content.vb: Public Function TryRunNextTask(ByRef exception As Exception) As Boolean
  overload: Moth.Tasks.TaskQueue.TryRunNextTask*
  nameWithType.vb: TaskQueue.TryRunNextTask(ByRef Exception)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Moth.Tasks.TaskQueue.TryRunNextTask(ByRef System.Exception)
  name.vb: TryRunNextTask(ByRef Exception)
- uid: Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler,System.Exception@)
  commentId: M:Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler,System.Exception@)
  id: TryRunNextTask(Moth.Tasks.IProfiler,System.Exception@)
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: TryRunNextTask(IProfiler, out Exception)
  nameWithType: TaskQueue.TryRunNextTask(IProfiler, out Exception)
  fullName: Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler, out System.Exception)
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: TryRunNextTask
    path: TaskQueue.cs
    startLine: 122
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nTry to run the next task in the queue, if present. Also performs profiling on the task through an <xref href=\"Moth.Tasks.IProfiler\" data-throw-if-not-resolved=\"false\"></xref>, and provides an <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> thrown by the task in case it fails.\n"
  remarks: "\nPlease note that the return value does not indicate if a task was successful. The method will return <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a task was ready in the queue, regardless if an exception occured.\n"
  example: []
  syntax:
    content: public bool TryRunNextTask(IProfiler profiler, out Exception exception)
    parameters:
    - id: profiler
      type: Moth.Tasks.IProfiler
      description: <xref href="Moth.Tasks.IProfiler" data-throw-if-not-resolved="false"></xref> to profile the run-time of the task.
    - id: exception
      type: System.Exception
      description: <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> thrown if task failed. Is <xref uid="langword_csharp_null" name="null" href=""></xref> if task was run successfully.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if a task was run, <xref uid="langword_csharp_false" name="false" href=""></xref> if the <xref href="Moth.Tasks.TaskQueue" data-throw-if-not-resolved="false"></xref> is empty.
    content.vb: Public Function TryRunNextTask(profiler As IProfiler, ByRef exception As Exception) As Boolean
  overload: Moth.Tasks.TaskQueue.TryRunNextTask*
  nameWithType.vb: TaskQueue.TryRunNextTask(IProfiler, ByRef Exception)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler, ByRef System.Exception)
  name.vb: TryRunNextTask(IProfiler, ByRef Exception)
- uid: Moth.Tasks.TaskQueue.Clear(System.Action{System.Exception})
  commentId: M:Moth.Tasks.TaskQueue.Clear(System.Action{System.Exception})
  id: Clear(System.Action{System.Exception})
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: Clear(Action<Exception>)
  nameWithType: TaskQueue.Clear(Action<Exception>)
  fullName: Moth.Tasks.TaskQueue.Clear(System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Clear
    path: TaskQueue.cs
    startLine: 190
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nRemoves all pending tasks from the queue. Also calls <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on tasks which implement the method.\n"
  remarks: "\nAs the method iterates through all tasks in the queue and calls <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on tasks, it can hang for an unknown amount of time. If an exception is thrown in an <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> call, the method continues on with disposing the remaining tasks.\n"
  example: []
  syntax:
    content: public void Clear(Action<Exception> exceptionHandler = null)
    parameters:
    - id: exceptionHandler
      type: System.Action{System.Exception}
      description: Method for handling an exception thrown by a task&apos;s <xref href="System.IDisposable.Dispose" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Clear(exceptionHandler As Action(Of Exception) = Nothing)
  overload: Moth.Tasks.TaskQueue.Clear*
  nameWithType.vb: TaskQueue.Clear(Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Moth.Tasks.TaskQueue.Clear(System.Action(Of System.Exception))
  name.vb: Clear(Action(Of Exception))
- uid: Moth.Tasks.TaskQueue.Dispose
  commentId: M:Moth.Tasks.TaskQueue.Dispose
  id: Dispose
  parent: Moth.Tasks.TaskQueue
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: TaskQueue.Dispose()
  fullName: Moth.Tasks.TaskQueue.Dispose()
  type: Method
  source:
    remote:
      path: Moth.Tasks/TaskQueue.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Dispose
    path: TaskQueue.cs
    startLine: 226
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nDisposes all tasks which implements <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nAs the method iterates through all tasks in the queue and calls <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on tasks, it can hang for an unknown amount of time. If an exception is thrown in an <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> call, the method continues on with disposing the remaining tasks.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Moth.Tasks.TaskQueue.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Moth.Tasks
  commentId: N:Moth.Tasks
  name: Moth.Tasks
  nameWithType: Moth.Tasks
  fullName: Moth.Tasks
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Moth.Tasks.TaskQueue
  commentId: T:Moth.Tasks.TaskQueue
  name: TaskQueue
  nameWithType: TaskQueue
  fullName: Moth.Tasks.TaskQueue
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Moth.Tasks.TaskQueue.Finalize*
  commentId: Overload:Moth.Tasks.TaskQueue.Finalize
  name: Finalize
  nameWithType: TaskQueue.Finalize
  fullName: Moth.Tasks.TaskQueue.Finalize
- uid: Moth.Tasks.TaskQueue.Enqueue*
  commentId: Overload:Moth.Tasks.TaskQueue.Enqueue
  name: Enqueue
  nameWithType: TaskQueue.Enqueue
  fullName: Moth.Tasks.TaskQueue.Enqueue
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Moth.Tasks.ITask
  commentId: T:Moth.Tasks.ITask
  name: ITask
  nameWithType: ITask
  fullName: Moth.Tasks.ITask
- uid: Moth.Tasks.TaskHandle
  commentId: T:Moth.Tasks.TaskHandle
  parent: Moth.Tasks
  name: TaskHandle
  nameWithType: TaskHandle
  fullName: Moth.Tasks.TaskHandle
- uid: Moth.Tasks.TaskQueue.TryRunNextTask*
  commentId: Overload:Moth.Tasks.TaskQueue.TryRunNextTask
  name: TryRunNextTask
  nameWithType: TaskQueue.TryRunNextTask
  fullName: Moth.Tasks.TaskQueue.TryRunNextTask
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Moth.Tasks.IProfiler
  commentId: T:Moth.Tasks.IProfiler
  parent: Moth.Tasks
  name: IProfiler
  nameWithType: IProfiler
  fullName: Moth.Tasks.IProfiler
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Moth.Tasks.TaskQueue.Clear*
  commentId: Overload:Moth.Tasks.TaskQueue.Clear
  name: Clear
  nameWithType: TaskQueue.Clear
  fullName: Moth.Tasks.TaskQueue.Clear
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Moth.Tasks.TaskQueue.Dispose*
  commentId: Overload:Moth.Tasks.TaskQueue.Dispose
  name: Dispose
  nameWithType: TaskQueue.Dispose
  fullName: Moth.Tasks.TaskQueue.Dispose
