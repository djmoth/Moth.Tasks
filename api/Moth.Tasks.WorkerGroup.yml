### YamlMime:ManagedReference
items:
- uid: Moth.Tasks.WorkerGroup
  commentId: T:Moth.Tasks.WorkerGroup
  id: WorkerGroup
  parent: Moth.Tasks
  children:
  - Moth.Tasks.WorkerGroup.#ctor(System.Int32,Moth.Tasks.TaskQueue,System.Boolean,System.Boolean,System.EventHandler{Moth.Tasks.TaskExceptionEventArgs},Moth.Tasks.IProfiler)
  - Moth.Tasks.WorkerGroup.Dispose
  - Moth.Tasks.WorkerGroup.Dispose(System.Boolean)
  - Moth.Tasks.WorkerGroup.Finalize
  - Moth.Tasks.WorkerGroup.Tasks
  langs:
  - csharp
  - vb
  name: WorkerGroup
  nameWithType: WorkerGroup
  fullName: Moth.Tasks.WorkerGroup
  type: Class
  source:
    remote:
      path: Moth.Tasks/WorkerGroup.cs
      branch: workers
      repo: https://github.com/djmoth/Moth.Tasks
    id: WorkerGroup
    path: WorkerGroup.cs
    startLine: 11
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nA group of <xref href=\"Moth.Tasks.Worker\" data-throw-if-not-resolved=\"false\"></xref>s, executing tasks from a shared <xref href=\"Moth.Tasks.TaskQueue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class WorkerGroup : IDisposable'
    content.vb: >-
      Public Class WorkerGroup
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Moth.Tasks.WorkerGroup.#ctor(System.Int32,Moth.Tasks.TaskQueue,System.Boolean,System.Boolean,System.EventHandler{Moth.Tasks.TaskExceptionEventArgs},Moth.Tasks.IProfiler)
  commentId: M:Moth.Tasks.WorkerGroup.#ctor(System.Int32,Moth.Tasks.TaskQueue,System.Boolean,System.Boolean,System.EventHandler{Moth.Tasks.TaskExceptionEventArgs},Moth.Tasks.IProfiler)
  id: '#ctor(System.Int32,Moth.Tasks.TaskQueue,System.Boolean,System.Boolean,System.EventHandler{Moth.Tasks.TaskExceptionEventArgs},Moth.Tasks.IProfiler)'
  parent: Moth.Tasks.WorkerGroup
  langs:
  - csharp
  - vb
  name: WorkerGroup(Int32, TaskQueue, Boolean, Boolean, EventHandler<TaskExceptionEventArgs>, IProfiler)
  nameWithType: WorkerGroup.WorkerGroup(Int32, TaskQueue, Boolean, Boolean, EventHandler<TaskExceptionEventArgs>, IProfiler)
  fullName: Moth.Tasks.WorkerGroup.WorkerGroup(System.Int32, Moth.Tasks.TaskQueue, System.Boolean, System.Boolean, System.EventHandler<Moth.Tasks.TaskExceptionEventArgs>, Moth.Tasks.IProfiler)
  type: Constructor
  source:
    remote:
      path: Moth.Tasks/WorkerGroup.cs
      branch: workers
      repo: https://github.com/djmoth/Moth.Tasks
    id: .ctor
    path: WorkerGroup.cs
    startLine: 28
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nInitializes a new instance of the <xref href=\"Moth.Tasks.WorkerGroup\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public WorkerGroup(int workerCount, TaskQueue taskQueue, bool disposeTaskQueue = false, bool isBackground = true, EventHandler<TaskExceptionEventArgs> exceptionEventHandler = null, IProfiler profiler = null)
    parameters:
    - id: workerCount
      type: System.Int32
      description: Number of workers. Must be greater than zero.
    - id: taskQueue
      type: Moth.Tasks.TaskQueue
      description: The <xref href="Moth.Tasks.TaskQueue" data-throw-if-not-resolved="false"></xref> of which the workers will be executing tasks from.
    - id: disposeTaskQueue
      type: System.Boolean
      description: Determines whether the <xref href="Moth.Tasks.TaskQueue" data-throw-if-not-resolved="false"></xref> supplied with <code data-dev-comment-type="paramref" class="paramref">taskQueue</code> is disposed when <xref href="Moth.Tasks.WorkerGroup.Dispose" data-throw-if-not-resolved="false"></xref> is called.
    - id: isBackground
      type: System.Boolean
      description: Defines the <xref href="System.Threading.Thread.IsBackground" data-throw-if-not-resolved="false"></xref> property of the internal thread of each worker.
    - id: exceptionEventHandler
      type: System.EventHandler{Moth.Tasks.TaskExceptionEventArgs}
      description: Method invoked if a task throws an exception. May be <xref uid="langword_csharp_null" name="null" href=""></xref>.
    - id: profiler
      type: Moth.Tasks.IProfiler
      description: <xref href="Moth.Tasks.IProfiler" data-throw-if-not-resolved="false"></xref> used to profile tasks. May be <xref uid="langword_csharp_null" name="null" href=""></xref>.
    content.vb: Public Sub New(workerCount As Integer, taskQueue As TaskQueue, disposeTaskQueue As Boolean = False, isBackground As Boolean = True, exceptionEventHandler As EventHandler(Of TaskExceptionEventArgs) = Nothing, profiler As IProfiler = Nothing)
  overload: Moth.Tasks.WorkerGroup.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code data-dev-comment-type="paramref" class="paramref">workerCount</code> must be greater than zero.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">taskQueue</code> cannot be null.
  nameWithType.vb: WorkerGroup.WorkerGroup(Int32, TaskQueue, Boolean, Boolean, EventHandler(Of TaskExceptionEventArgs), IProfiler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Moth.Tasks.WorkerGroup.WorkerGroup(System.Int32, Moth.Tasks.TaskQueue, System.Boolean, System.Boolean, System.EventHandler(Of Moth.Tasks.TaskExceptionEventArgs), Moth.Tasks.IProfiler)
  name.vb: WorkerGroup(Int32, TaskQueue, Boolean, Boolean, EventHandler(Of TaskExceptionEventArgs), IProfiler)
- uid: Moth.Tasks.WorkerGroup.Finalize
  commentId: M:Moth.Tasks.WorkerGroup.Finalize
  id: Finalize
  parent: Moth.Tasks.WorkerGroup
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: WorkerGroup.Finalize()
  fullName: Moth.Tasks.WorkerGroup.Finalize()
  type: Method
  source:
    remote:
      path: Moth.Tasks/WorkerGroup.cs
      branch: workers
      repo: https://github.com/djmoth/Moth.Tasks
    id: Finalize
    path: WorkerGroup.cs
    startLine: 50
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nFinalizes an instance of the <xref href=\"Moth.Tasks.WorkerGroup\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Moth.Tasks.WorkerGroup.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Moth.Tasks.WorkerGroup.Tasks
  commentId: P:Moth.Tasks.WorkerGroup.Tasks
  id: Tasks
  parent: Moth.Tasks.WorkerGroup
  langs:
  - csharp
  - vb
  name: Tasks
  nameWithType: WorkerGroup.Tasks
  fullName: Moth.Tasks.WorkerGroup.Tasks
  type: Property
  source:
    remote:
      path: Moth.Tasks/WorkerGroup.cs
      branch: workers
      repo: https://github.com/djmoth/Moth.Tasks
    id: Tasks
    path: WorkerGroup.cs
    startLine: 55
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nThe <xref href=\"Moth.Tasks.TaskQueue\" data-throw-if-not-resolved=\"false\"></xref> of which the workers are executing tasks from.\n"
  example: []
  syntax:
    content: public TaskQueue Tasks { get; }
    parameters: []
    return:
      type: Moth.Tasks.TaskQueue
    content.vb: Public ReadOnly Property Tasks As TaskQueue
  overload: Moth.Tasks.WorkerGroup.Tasks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Moth.Tasks.WorkerGroup.Dispose
  commentId: M:Moth.Tasks.WorkerGroup.Dispose
  id: Dispose
  parent: Moth.Tasks.WorkerGroup
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: WorkerGroup.Dispose()
  fullName: Moth.Tasks.WorkerGroup.Dispose()
  type: Method
  source:
    remote:
      path: Moth.Tasks/WorkerGroup.cs
      branch: workers
      repo: https://github.com/djmoth/Moth.Tasks
    id: Dispose
    path: WorkerGroup.cs
    startLine: 60
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nSignals all workers to shutdown. Also disposes of <xref href=\"Moth.Tasks.WorkerGroup.Tasks\" data-throw-if-not-resolved=\"false\"></xref> if specified in <xref href=\"Moth.Tasks.WorkerGroup\" data-throw-if-not-resolved=\"false\"></xref> constructor.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Moth.Tasks.WorkerGroup.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.WorkerGroup.Dispose(System.Boolean)
  commentId: M:Moth.Tasks.WorkerGroup.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Moth.Tasks.WorkerGroup
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: WorkerGroup.Dispose(Boolean)
  fullName: Moth.Tasks.WorkerGroup.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Moth.Tasks/WorkerGroup.cs
      branch: workers
      repo: https://github.com/djmoth/Moth.Tasks
    id: Dispose
    path: WorkerGroup.cs
    startLine: 73
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nSignals all workers to shutdown. Also disposes of <xref href=\"Moth.Tasks.WorkerGroup.Tasks\" data-throw-if-not-resolved=\"false\"></xref> if specified in <xref href=\"Moth.Tasks.WorkerGroup\" data-throw-if-not-resolved=\"false\"></xref> constructor.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if called from <xref href="Moth.Tasks.WorkerGroup.Dispose" data-throw-if-not-resolved="false"></xref>, <xref uid="langword_csharp_false" name="false" href=""></xref> if called from finalizer.
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Moth.Tasks.WorkerGroup.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Moth.Tasks.Worker
  commentId: T:Moth.Tasks.Worker
  name: Worker
  nameWithType: Worker
  fullName: Moth.Tasks.Worker
- uid: Moth.Tasks.TaskQueue
  commentId: T:Moth.Tasks.TaskQueue
  parent: Moth.Tasks
  name: TaskQueue
  nameWithType: TaskQueue
  fullName: Moth.Tasks.TaskQueue
- uid: Moth.Tasks
  commentId: N:Moth.Tasks
  name: Moth.Tasks
  nameWithType: Moth.Tasks
  fullName: Moth.Tasks
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.String)
  commentId: M:Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
  parent: Moth.Tasks.Tests.TestUtilities
  definition: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
  name: GetPrivateValue<T>(String)
  nameWithType: TestUtilities.GetPrivateValue<T>(String)
  fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue<T>(System.String)
  nameWithType.vb: TestUtilities.GetPrivateValue(Of T)(String)
  fullName.vb: Moth.Tasks.Tests.TestUtilities.GetPrivateValue(Of T)(System.String)
  name.vb: GetPrivateValue(Of T)(String)
  spec.csharp:
  - uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.String)
    name: GetPrivateValue<T>
    nameWithType: TestUtilities.GetPrivateValue<T>
    fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.String)
    name: GetPrivateValue(Of T)
    nameWithType: TestUtilities.GetPrivateValue(Of T)
    fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
  commentId: M:Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
  isExternal: true
  name: GetPrivateValue<T>(Object, String)
  nameWithType: TestUtilities.GetPrivateValue<T>(Object, String)
  fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue<T>(System.Object, System.String)
  nameWithType.vb: TestUtilities.GetPrivateValue(Of T)(Object, String)
  fullName.vb: Moth.Tasks.Tests.TestUtilities.GetPrivateValue(Of T)(System.Object, System.String)
  name.vb: GetPrivateValue(Of T)(Object, String)
  spec.csharp:
  - uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
    name: GetPrivateValue<T>
    nameWithType: TestUtilities.GetPrivateValue<T>
    fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
    name: GetPrivateValue(Of T)
    nameWithType: TestUtilities.GetPrivateValue(Of T)
    fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Moth.Tasks.Tests.TestUtilities
  commentId: T:Moth.Tasks.Tests.TestUtilities
  parent: Moth.Tasks.Tests
  name: TestUtilities
  nameWithType: TestUtilities
  fullName: Moth.Tasks.Tests.TestUtilities
- uid: Moth.Tasks.Tests
  commentId: N:Moth.Tasks.Tests
  name: Moth.Tasks.Tests
  nameWithType: Moth.Tasks.Tests
  fullName: Moth.Tasks.Tests
- uid: Moth.Tasks.WorkerGroup
  commentId: T:Moth.Tasks.WorkerGroup
  name: WorkerGroup
  nameWithType: WorkerGroup
  fullName: Moth.Tasks.WorkerGroup
- uid: Moth.Tasks.WorkerGroup.Dispose
  commentId: M:Moth.Tasks.WorkerGroup.Dispose
  isExternal: true
- uid: System.Threading.Thread.IsBackground
  commentId: P:System.Threading.Thread.IsBackground
  isExternal: true
- uid: Moth.Tasks.IProfiler
  commentId: T:Moth.Tasks.IProfiler
  parent: Moth.Tasks
  name: IProfiler
  nameWithType: IProfiler
  fullName: Moth.Tasks.IProfiler
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Moth.Tasks.WorkerGroup.#ctor*
  commentId: Overload:Moth.Tasks.WorkerGroup.#ctor
  name: WorkerGroup
  nameWithType: WorkerGroup.WorkerGroup
  fullName: Moth.Tasks.WorkerGroup.WorkerGroup
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.EventHandler{Moth.Tasks.TaskExceptionEventArgs}
  commentId: T:System.EventHandler{Moth.Tasks.TaskExceptionEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<TaskExceptionEventArgs>
  nameWithType: EventHandler<TaskExceptionEventArgs>
  fullName: System.EventHandler<Moth.Tasks.TaskExceptionEventArgs>
  nameWithType.vb: EventHandler(Of TaskExceptionEventArgs)
  fullName.vb: System.EventHandler(Of Moth.Tasks.TaskExceptionEventArgs)
  name.vb: EventHandler(Of TaskExceptionEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Moth.Tasks.TaskExceptionEventArgs
    name: TaskExceptionEventArgs
    nameWithType: TaskExceptionEventArgs
    fullName: Moth.Tasks.TaskExceptionEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Moth.Tasks.TaskExceptionEventArgs
    name: TaskExceptionEventArgs
    nameWithType: TaskExceptionEventArgs
    fullName: Moth.Tasks.TaskExceptionEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Moth.Tasks.WorkerGroup.Finalize*
  commentId: Overload:Moth.Tasks.WorkerGroup.Finalize
  name: Finalize
  nameWithType: WorkerGroup.Finalize
  fullName: Moth.Tasks.WorkerGroup.Finalize
- uid: Moth.Tasks.WorkerGroup.Tasks*
  commentId: Overload:Moth.Tasks.WorkerGroup.Tasks
  name: Tasks
  nameWithType: WorkerGroup.Tasks
  fullName: Moth.Tasks.WorkerGroup.Tasks
- uid: Moth.Tasks.WorkerGroup.Tasks
  commentId: P:Moth.Tasks.WorkerGroup.Tasks
  isExternal: true
- uid: Moth.Tasks.WorkerGroup.Dispose*
  commentId: Overload:Moth.Tasks.WorkerGroup.Dispose
  name: Dispose
  nameWithType: WorkerGroup.Dispose
  fullName: Moth.Tasks.WorkerGroup.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
