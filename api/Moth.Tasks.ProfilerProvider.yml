### YamlMime:ManagedReference
items:
- uid: Moth.Tasks.ProfilerProvider
  commentId: T:Moth.Tasks.ProfilerProvider
  id: ProfilerProvider
  parent: Moth.Tasks
  children: []
  langs:
  - csharp
  - vb
  name: ProfilerProvider
  nameWithType: ProfilerProvider
  fullName: Moth.Tasks.ProfilerProvider
  type: Delegate
  source:
    remote:
      path: Moth.Tasks/ProfilerProvider.cs
      branch: workers
      repo: https://github.com/djmoth/Moth.Tasks
    id: ProfilerProvider
    path: ProfilerProvider.cs
    startLine: 10
  assemblies:
  - Moth.Tasks
  namespace: Moth.Tasks
  summary: "\nRepresents a method that provides an <xref href=\"Moth.Tasks.IProfiler\" data-throw-if-not-resolved=\"false\"></xref> for a <xref href=\"Moth.Tasks.Worker\" data-throw-if-not-resolved=\"false\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if profiling is not desired.\n"
  remarks: "\nThe method does not have to provide a unique <xref href=\"Moth.Tasks.IProfiler\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Moth.Tasks.Worker\" data-throw-if-not-resolved=\"false\"></xref>, yet in that case it must be able to differentiate between <xref href=\"Moth.Tasks.Worker\" data-throw-if-not-resolved=\"false\"></xref>s on its own, so as their calls to <xref href=\"Moth.Tasks.IProfiler.BeginTask(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Moth.Tasks.IProfiler.EndTask\" data-throw-if-not-resolved=\"false\"></xref> don&apos;t interfere.\n"
  example: []
  syntax:
    content: public delegate IProfiler ProfilerProvider(Worker worker);
    parameters:
    - id: worker
      type: Moth.Tasks.Worker
      description: The <xref href="Moth.Tasks.Worker" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Moth.Tasks.IProfiler
      description: An <xref href="Moth.Tasks.IProfiler" data-throw-if-not-resolved="false"></xref> for the <code data-dev-comment-type="paramref" class="paramref">worker</code>, or <xref uid="langword_csharp_null" name="null" href=""></xref> if profiling is not desired.
    content.vb: Public Delegate Function ProfilerProvider(worker As Worker) As IProfiler
  extensionMethods:
  - System.Object.Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.String)
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: Moth.Tasks.IProfiler
  commentId: T:Moth.Tasks.IProfiler
  parent: Moth.Tasks
  name: IProfiler
  nameWithType: IProfiler
  fullName: Moth.Tasks.IProfiler
- uid: Moth.Tasks.Worker
  commentId: T:Moth.Tasks.Worker
  parent: Moth.Tasks
  name: Worker
  nameWithType: Worker
  fullName: Moth.Tasks.Worker
- uid: Moth.Tasks.IProfiler.BeginTask(System.String)
  commentId: M:Moth.Tasks.IProfiler.BeginTask(System.String)
  isExternal: true
- uid: Moth.Tasks.IProfiler.EndTask
  commentId: M:Moth.Tasks.IProfiler.EndTask
  isExternal: true
- uid: Moth.Tasks
  commentId: N:Moth.Tasks
  name: Moth.Tasks
  nameWithType: Moth.Tasks
  fullName: Moth.Tasks
- uid: System.Object.Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.String)
  commentId: M:Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
  parent: Moth.Tasks.Tests.TestUtilities
  definition: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
  name: GetPrivateValue<T>(String)
  nameWithType: TestUtilities.GetPrivateValue<T>(String)
  fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue<T>(System.String)
  nameWithType.vb: TestUtilities.GetPrivateValue(Of T)(String)
  fullName.vb: Moth.Tasks.Tests.TestUtilities.GetPrivateValue(Of T)(System.String)
  name.vb: GetPrivateValue(Of T)(String)
  spec.csharp:
  - uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.String)
    name: GetPrivateValue<T>
    nameWithType: TestUtilities.GetPrivateValue<T>
    fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.String)
    name: GetPrivateValue(Of T)
    nameWithType: TestUtilities.GetPrivateValue(Of T)
    fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
  commentId: M:Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
  isExternal: true
  name: GetPrivateValue<T>(Object, String)
  nameWithType: TestUtilities.GetPrivateValue<T>(Object, String)
  fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue<T>(System.Object, System.String)
  nameWithType.vb: TestUtilities.GetPrivateValue(Of T)(Object, String)
  fullName.vb: Moth.Tasks.Tests.TestUtilities.GetPrivateValue(Of T)(System.Object, System.String)
  name.vb: GetPrivateValue(Of T)(Object, String)
  spec.csharp:
  - uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
    name: GetPrivateValue<T>
    nameWithType: TestUtilities.GetPrivateValue<T>
    fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Moth.Tasks.Tests.TestUtilities.GetPrivateValue``1(System.Object,System.String)
    name: GetPrivateValue(Of T)
    nameWithType: TestUtilities.GetPrivateValue(Of T)
    fullName: Moth.Tasks.Tests.TestUtilities.GetPrivateValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Moth.Tasks.Tests.TestUtilities
  commentId: T:Moth.Tasks.Tests.TestUtilities
  parent: Moth.Tasks.Tests
  name: TestUtilities
  nameWithType: TestUtilities
  fullName: Moth.Tasks.Tests.TestUtilities
- uid: Moth.Tasks.Tests
  commentId: N:Moth.Tasks.Tests
  name: Moth.Tasks.Tests
  nameWithType: Moth.Tasks.Tests
  fullName: Moth.Tasks.Tests
