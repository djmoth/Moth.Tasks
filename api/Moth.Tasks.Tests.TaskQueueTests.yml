### YamlMime:ManagedReference
items:
- uid: Moth.Tasks.Tests.TaskQueueTests
  commentId: T:Moth.Tasks.Tests.TaskQueueTests
  id: TaskQueueTests
  parent: Moth.Tasks.Tests
  children:
  - Moth.Tasks.Tests.TaskQueueTests.Clear
  - Moth.Tasks.Tests.TaskQueueTests.Dispose
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAction
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Action
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ActionWithArg
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_AssertValidData
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Exception
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_IDisposable
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ITask
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Profiler
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_Completed
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_IDisposable
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueITask
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueTask_ExpandTaskData
  - Moth.Tasks.Tests.TaskQueueTests.EnqueueWithTaskHandle
  - Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnFalse
  - Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnTrue
  langs:
  - csharp
  - vb
  name: TaskQueueTests
  nameWithType: TaskQueueTests
  fullName: Moth.Tasks.Tests.TaskQueueTests
  type: Class
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: TaskQueueTests
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 9
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  syntax:
    content: public class TaskQueueTests
    content.vb: Public Class TaskQueueTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueITask
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueITask
  id: EnqueueITask
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueITask()
  nameWithType: TaskQueueTests.EnqueueITask()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueITask()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueITask
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 14
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues an <xref href=\"Moth.Tasks.ITask\" data-throw-if-not-resolved=\"false\"></xref> in an empty <xref href=\"Moth.Tasks.TaskQueue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueITask()
    content.vb: >-
      <Test>

      Public Sub EnqueueITask
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueITask*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAction
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAction
  id: EnqueueAction
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAction()
  nameWithType: TaskQueueTests.EnqueueAction()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAction()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAction
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 27
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> in an empty <xref href=\"Moth.Tasks.TaskQueue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAction()
    content.vb: >-
      <Test>

      Public Sub EnqueueAction
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAction*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueTask_ExpandTaskData
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueTask_ExpandTaskData
  id: EnqueueTask_ExpandTaskData
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueTask_ExpandTaskData()
  nameWithType: TaskQueueTests.EnqueueTask_ExpandTaskData()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueTask_ExpandTaskData()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueTask_ExpandTaskData
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 41
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues multiple tasks, asserts that the internal <see cref=\"!:TaskQueue.taskData\"></see> array expands accordingly.\nAlso runs a task, to ensure that the internal <see cref=\"!:TaskQueue.firstTask\"></see> index points correctly.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueTask_ExpandTaskData()
    content.vb: >-
      <Test>

      Public Sub EnqueueTask_ExpandTaskData
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueTask_ExpandTaskData*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_AssertValidData
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_AssertValidData
  id: EnqueueAndTryRun_AssertValidData
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndTryRun_AssertValidData()
  nameWithType: TaskQueueTests.EnqueueAndTryRun_AssertValidData()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_AssertValidData()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndTryRun_AssertValidData
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 87
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs multiple tasks, and asserts that the internal <see cref=\"!:TaskQueue.firstTask\"></see> index points to the right task.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndTryRun_AssertValidData()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndTryRun_AssertValidData
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_AssertValidData*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ITask
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ITask
  id: EnqueueAndTryRun_ITask
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndTryRun_ITask()
  nameWithType: TaskQueueTests.EnqueueAndTryRun_ITask()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ITask()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndTryRun_ITask
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 152
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs an <xref href=\"Moth.Tasks.ITask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndTryRun_ITask()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndTryRun_ITask
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ITask*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Action
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Action
  id: EnqueueAndTryRun_Action
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndTryRun_Action()
  nameWithType: TaskQueueTests.EnqueueAndTryRun_Action()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Action()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndTryRun_Action
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 174
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndTryRun_Action()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndTryRun_Action
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Action*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ActionWithArg
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ActionWithArg
  id: EnqueueAndTryRun_ActionWithArg
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndTryRun_ActionWithArg()
  nameWithType: TaskQueueTests.EnqueueAndTryRun_ActionWithArg()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ActionWithArg()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndTryRun_ActionWithArg
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 196
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> with a supplied argument.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndTryRun_ActionWithArg()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndTryRun_ActionWithArg
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ActionWithArg*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Profiler
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Profiler
  id: EnqueueAndTryRun_Profiler
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndTryRun_Profiler()
  nameWithType: TaskQueueTests.EnqueueAndTryRun_Profiler()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Profiler()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndTryRun_Profiler
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 218
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs a task, while running an <xref href=\"Moth.Tasks.IProfiler\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndTryRun_Profiler()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndTryRun_Profiler
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Profiler*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_IDisposable
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_IDisposable
  id: EnqueueAndTryRun_IDisposable
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndTryRun_IDisposable()
  nameWithType: TaskQueueTests.EnqueueAndTryRun_IDisposable()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_IDisposable()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndTryRun_IDisposable
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 242
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs a task implementing <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref>, asserting that <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> is run.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndTryRun_IDisposable()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndTryRun_IDisposable
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_IDisposable*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Exception
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Exception
  id: EnqueueAndTryRun_Exception
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndTryRun_Exception()
  nameWithType: TaskQueueTests.EnqueueAndTryRun_Exception()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Exception()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndTryRun_Exception
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 264
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs a task which throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> in its <xref href=\"Moth.Tasks.ITask.Run\" data-throw-if-not-resolved=\"false\"></xref> method. Asserts that the exception is returned from <xref href=\"Moth.Tasks.TaskQueue.RunNextTask(System.Exception%40)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndTryRun_Exception()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndTryRun_Exception
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Exception*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling
  id: EnqueueAndTryRun_ExceptionWhileProfiling
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndTryRun_ExceptionWhileProfiling()
  nameWithType: TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndTryRun_ExceptionWhileProfiling
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 279
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs a task which throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> in its <xref href=\"Moth.Tasks.ITask.Run\" data-throw-if-not-resolved=\"false\"></xref> method, while running an <xref href=\"Moth.Tasks.IProfiler\" data-throw-if-not-resolved=\"false\"></xref>. Asserts profiling is stopped correctly.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndTryRun_ExceptionWhileProfiling()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndTryRun_ExceptionWhileProfiling
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueWithTaskHandle
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueWithTaskHandle
  id: EnqueueWithTaskHandle
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueWithTaskHandle()
  nameWithType: TaskQueueTests.EnqueueWithTaskHandle()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueWithTaskHandle()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueWithTaskHandle
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 300
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues a task with <xref href=\"Moth.Tasks.TaskQueue.Enqueue%60%601(%60%600%40%2cMoth.Tasks.TaskHandle%40)\" data-throw-if-not-resolved=\"false\"></xref> and asserts that the <xref href=\"Moth.Tasks.TaskHandle\" data-throw-if-not-resolved=\"false\"></xref> returned is valid.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueWithTaskHandle()
    content.vb: >-
      <Test>

      Public Sub EnqueueWithTaskHandle
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueWithTaskHandle*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait
  id: EnqueueAndWait
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndWait()
  nameWithType: TaskQueueTests.EnqueueAndWait()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndWait
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 313
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues a task and runs it in a seperate thread, while waiting for its completion with <xref href=\"Moth.Tasks.TaskHandle.WaitForCompletion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndWait()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndWait
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_IDisposable
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_IDisposable
  id: EnqueueAndWait_IDisposable
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndWait_IDisposable()
  nameWithType: TaskQueueTests.EnqueueAndWait_IDisposable()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_IDisposable()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndWait_IDisposable
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 347
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues a task implementing <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref>, and asserts that its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method is called from <xref href=\"Moth.Tasks.DisposableTaskWithHandle%601.Dispose\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndWait_IDisposable()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndWait_IDisposable
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_IDisposable*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_Completed
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_Completed
  id: EnqueueAndWait_Completed
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: EnqueueAndWait_Completed()
  nameWithType: TaskQueueTests.EnqueueAndWait_Completed()
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_Completed()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: EnqueueAndWait_Completed
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 385
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues and runs a task, calling <xref href=\"Moth.Tasks.TaskHandle.WaitForCompletion\" data-throw-if-not-resolved=\"false\"></xref> after its supposed completion. Asserts that the call does not hang.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void EnqueueAndWait_Completed()
    content.vb: >-
      <Test>

      Public Sub EnqueueAndWait_Completed
  overload: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_Completed*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnFalse
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnFalse
  id: TryRun_ReturnFalse
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: TryRun_ReturnFalse()
  nameWithType: TaskQueueTests.TryRun_ReturnFalse()
  fullName: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnFalse()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: TryRun_ReturnFalse
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 400
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nAsserts that <xref href=\"Moth.Tasks.TaskQueue.RunNextTask\" data-throw-if-not-resolved=\"false\"></xref> will return <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> when the <xref href=\"Moth.Tasks.TaskQueue\" data-throw-if-not-resolved=\"false\"></xref> is empty.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void TryRun_ReturnFalse()
    content.vb: >-
      <Test>

      Public Sub TryRun_ReturnFalse
  overload: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnFalse*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnTrue
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnTrue
  id: TryRun_ReturnTrue
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: TryRun_ReturnTrue()
  nameWithType: TaskQueueTests.TryRun_ReturnTrue()
  fullName: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnTrue()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: TryRun_ReturnTrue
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 411
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nAsserts that <xref href=\"Moth.Tasks.TaskQueue.RunNextTask\" data-throw-if-not-resolved=\"false\"></xref> will return <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the <xref href=\"Moth.Tasks.TaskQueue\" data-throw-if-not-resolved=\"false\"></xref> has a task enqueued and ready to be ran.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void TryRun_ReturnTrue()
    content.vb: >-
      <Test>

      Public Sub TryRun_ReturnTrue
  overload: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnTrue*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.Clear
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.Clear
  id: Clear
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: TaskQueueTests.Clear()
  fullName: Moth.Tasks.Tests.TaskQueueTests.Clear()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Clear
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 424
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  summary: "\nEnqueues a series of alternating <xref href=\"Moth.Tasks.Tests.TaskQueueTests.ExceptionOnDisposeTask\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Moth.Tasks.Tests.TaskQueueTests.PutValueAndDisposeTask\" data-throw-if-not-resolved=\"false\"></xref>, asserting that the exceptions thrown from <xref href=\"Moth.Tasks.Tests.TaskQueueTests.ExceptionOnDisposeTask.Dispose\" data-throw-if-not-resolved=\"false\"></xref> will not disrupt the execution of <xref href=\"Moth.Tasks.Tests.TaskQueueTests.PutValueAndDisposeTask.Dispose\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [Test]

      public void Clear()
    content.vb: >-
      <Test>

      Public Sub Clear
  overload: Moth.Tasks.Tests.TaskQueueTests.Clear*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Moth.Tasks.Tests.TaskQueueTests.Dispose
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.Dispose
  id: Dispose
  parent: Moth.Tasks.Tests.TaskQueueTests
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: TaskQueueTests.Dispose()
  fullName: Moth.Tasks.Tests.TaskQueueTests.Dispose()
  type: Method
  source:
    remote:
      path: Moth.Tasks.Tests/TaskQueueTests.cs
      branch: main
      repo: https://github.com/djmoth/Moth.Tasks
    id: Dispose
    path: ../Moth.Tasks.Tests/TaskQueueTests.cs
    startLine: 462
  assemblies:
  - Moth.Tasks.Tests
  namespace: Moth.Tasks.Tests
  syntax:
    content: >-
      [Test]

      public void Dispose()
    content.vb: >-
      <Test>

      Public Sub Dispose
  overload: Moth.Tasks.Tests.TaskQueueTests.Dispose*
  attributes:
  - type: NUnit.Framework.TestAttribute
    ctor: NUnit.Framework.TestAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Moth.Tasks.Tests
  commentId: N:Moth.Tasks.Tests
  name: Moth.Tasks.Tests
  nameWithType: Moth.Tasks.Tests
  fullName: Moth.Tasks.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Moth.Tasks.ITask
  commentId: T:Moth.Tasks.ITask
  name: ITask
  nameWithType: ITask
  fullName: Moth.Tasks.ITask
- uid: Moth.Tasks.TaskQueue
  commentId: T:Moth.Tasks.TaskQueue
  name: TaskQueue
  nameWithType: TaskQueue
  fullName: Moth.Tasks.TaskQueue
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueITask*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueITask
  name: EnqueueITask
  nameWithType: TaskQueueTests.EnqueueITask
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueITask
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAction*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAction
  name: EnqueueAction
  nameWithType: TaskQueueTests.EnqueueAction
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAction
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueTask_ExpandTaskData*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueTask_ExpandTaskData
  name: EnqueueTask_ExpandTaskData
  nameWithType: TaskQueueTests.EnqueueTask_ExpandTaskData
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueTask_ExpandTaskData
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_AssertValidData*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_AssertValidData
  name: EnqueueAndTryRun_AssertValidData
  nameWithType: TaskQueueTests.EnqueueAndTryRun_AssertValidData
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_AssertValidData
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ITask*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ITask
  name: EnqueueAndTryRun_ITask
  nameWithType: TaskQueueTests.EnqueueAndTryRun_ITask
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ITask
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Action*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Action
  name: EnqueueAndTryRun_Action
  nameWithType: TaskQueueTests.EnqueueAndTryRun_Action
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Action
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ActionWithArg*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ActionWithArg
  name: EnqueueAndTryRun_ActionWithArg
  nameWithType: TaskQueueTests.EnqueueAndTryRun_ActionWithArg
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ActionWithArg
- uid: Moth.Tasks.IProfiler
  commentId: T:Moth.Tasks.IProfiler
  parent: Moth.Tasks
  name: IProfiler
  nameWithType: IProfiler
  fullName: Moth.Tasks.IProfiler
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Profiler*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Profiler
  name: EnqueueAndTryRun_Profiler
  nameWithType: TaskQueueTests.EnqueueAndTryRun_Profiler
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Profiler
- uid: Moth.Tasks
  commentId: N:Moth.Tasks
  name: Moth.Tasks
  nameWithType: Moth.Tasks
  fullName: Moth.Tasks
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_IDisposable*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_IDisposable
  name: EnqueueAndTryRun_IDisposable
  nameWithType: TaskQueueTests.EnqueueAndTryRun_IDisposable
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_IDisposable
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: Moth.Tasks.ITask.Run
  commentId: M:Moth.Tasks.ITask.Run
  isExternal: true
- uid: Moth.Tasks.TaskQueue.RunNextTask(System.Exception@)
  commentId: M:Moth.Tasks.TaskQueue.RunNextTask(System.Exception@)
  isExternal: true
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Exception*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Exception
  name: EnqueueAndTryRun_Exception
  nameWithType: TaskQueueTests.EnqueueAndTryRun_Exception
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_Exception
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling
  name: EnqueueAndTryRun_ExceptionWhileProfiling
  nameWithType: TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndTryRun_ExceptionWhileProfiling
- uid: Moth.Tasks.TaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)
  commentId: M:Moth.Tasks.TaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)
  isExternal: true
- uid: Moth.Tasks.TaskHandle
  commentId: T:Moth.Tasks.TaskHandle
  parent: Moth.Tasks
  name: TaskHandle
  nameWithType: TaskHandle
  fullName: Moth.Tasks.TaskHandle
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueWithTaskHandle*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueWithTaskHandle
  name: EnqueueWithTaskHandle
  nameWithType: TaskQueueTests.EnqueueWithTaskHandle
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueWithTaskHandle
- uid: Moth.Tasks.TaskHandle.WaitForCompletion
  commentId: M:Moth.Tasks.TaskHandle.WaitForCompletion
  isExternal: true
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait
  name: EnqueueAndWait
  nameWithType: TaskQueueTests.EnqueueAndWait
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Moth.Tasks.DisposableTaskWithHandle`1.Dispose
  commentId: M:Moth.Tasks.DisposableTaskWithHandle`1.Dispose
  isExternal: true
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_IDisposable*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_IDisposable
  name: EnqueueAndWait_IDisposable
  nameWithType: TaskQueueTests.EnqueueAndWait_IDisposable
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_IDisposable
- uid: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_Completed*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_Completed
  name: EnqueueAndWait_Completed
  nameWithType: TaskQueueTests.EnqueueAndWait_Completed
  fullName: Moth.Tasks.Tests.TaskQueueTests.EnqueueAndWait_Completed
- uid: Moth.Tasks.TaskQueue.RunNextTask
  commentId: M:Moth.Tasks.TaskQueue.RunNextTask
  isExternal: true
- uid: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnFalse*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnFalse
  name: TryRun_ReturnFalse
  nameWithType: TaskQueueTests.TryRun_ReturnFalse
  fullName: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnFalse
- uid: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnTrue*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnTrue
  name: TryRun_ReturnTrue
  nameWithType: TaskQueueTests.TryRun_ReturnTrue
  fullName: Moth.Tasks.Tests.TaskQueueTests.TryRun_ReturnTrue
- uid: Moth.Tasks.Tests.TaskQueueTests.ExceptionOnDisposeTask
  commentId: T:Moth.Tasks.Tests.TaskQueueTests.ExceptionOnDisposeTask
  isExternal: true
- uid: Moth.Tasks.Tests.TaskQueueTests.PutValueAndDisposeTask
  commentId: T:Moth.Tasks.Tests.TaskQueueTests.PutValueAndDisposeTask
  isExternal: true
- uid: Moth.Tasks.Tests.TaskQueueTests.ExceptionOnDisposeTask.Dispose
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.ExceptionOnDisposeTask.Dispose
  isExternal: true
- uid: Moth.Tasks.Tests.TaskQueueTests.PutValueAndDisposeTask.Dispose
  commentId: M:Moth.Tasks.Tests.TaskQueueTests.PutValueAndDisposeTask.Dispose
  isExternal: true
- uid: Moth.Tasks.Tests.TaskQueueTests.Clear*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.Clear
  name: Clear
  nameWithType: TaskQueueTests.Clear
  fullName: Moth.Tasks.Tests.TaskQueueTests.Clear
- uid: Moth.Tasks.Tests.TaskQueueTests.Dispose*
  commentId: Overload:Moth.Tasks.Tests.TaskQueueTests.Dispose
  name: Dispose
  nameWithType: TaskQueueTests.Dispose
  fullName: Moth.Tasks.Tests.TaskQueueTests.Dispose
