<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Moth.Tasks
{
    using System;

    /* ------------------------------------------------------ *
     * Generated by ITaskQueueEnqueueExtensions.tt T4 template *
     * This file should not be edited manually.               *
     * ------------------------------------------------------ */

    /// <summary>
    /// Extends <see cref="ITaskQueue"/> to allow generic <see cref="Action"/>s to be enqueued as tasks.
    /// </summary>
    public static class ITaskQueueEnqueueExtensions
    {
        /// <summary>
        /// Enqueue an action to be run later.
        /// </summary>
        /// <param name="tasks"><see cref="ITaskQueue"/> in which the action is enqueued.</param>
        /// <param name="action">Action to enqueue.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <exception cref="ObjectDisposedException">The <see cref="ITaskQueue"/> has been disposed.</exception>
        public static void Enqueue (this ITaskQueue tasks, Action action)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            tasks.Enqueue (new DelegateTask (action));
        }
<# int maxParameterCount = 16;
string GetOrdinalSuffix (int n) => (n == 1 ? "st" : (n == 2 ? "nd" : (n == 3 ? "rd" : "th")));
for (int i = 1; i <= maxParameterCount; i++)
{
    string typeParameters = "T1";

    for (int t = 2; t <= i; t++)
        typeParameters += ", T" + t.ToString ();
#>

        /// <summary>
        /// Enqueue an action to be run later with supplied arguments.
        /// </summary>
        /// <param name="tasks"><see cref="ITaskQueue"/> in which the action is enqueued.</param>
        /// <param name="action">Action to enqueue.</param>
<# 
string paramList = "";
string argList = "";
for (int t = 1; t <= i; t++)
{
    WriteLine ($"        /// <param name=\"arg{t}\">The {t}{GetOrdinalSuffix (t)} argument to run <paramref name=\"action\"/> with.</param>");
    paramList += $", T{t} arg{t}";
    argList += $", arg{t}";
}

for (int t = 1; t <= i; t++)
    WriteLine ($"        /// <typeparam name=\"T{t}\">The type of the {t}{GetOrdinalSuffix (t)} parameter of <paramref name=\"action\"/>.</typeparam>");
#>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <exception cref="ObjectDisposedException">The <see cref="ITaskQueue"/> has been disposed.</exception>
        public static void Enqueue<<#=typeParameters#>> (this ITaskQueue tasks, Action<<#=typeParameters#>> action<#=paramList#>)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            tasks.Enqueue (new DelegateTask<<#=typeParameters#>> (action<#=argList#>));
        }

        /// <summary>
        /// Enqueue an action to be run later with supplied arguments, giving out a <see cref="TaskHandle"/> for checking task status.
        /// </summary>
        /// <param name="tasks"><see cref="ITaskQueue"/> in which the action is enqueued.</param>
        /// <param name="action">Action to enqueue.</param>
<# 
for (int t = 1; t <= i; t++)
    WriteLine ($"        /// <param name=\"arg{t}\">The {t}{GetOrdinalSuffix (t)} argument to run <paramref name=\"action\"/> with.</param>");

for (int t = 1; t <= i; t++)
    WriteLine ($"        /// <typeparam name=\"T{t}\">The type of the {t}{GetOrdinalSuffix (t)} parameter of <paramref name=\"action\"/>.</typeparam>");
#>
        /// <param name="handle"><see cref="TaskHandle"/> for checking task status.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <exception cref="ObjectDisposedException">The <see cref="ITaskQueue"/> has been disposed.</exception>
        public static void Enqueue<<#=typeParameters#>> (this ITaskQueue tasks, Action<<#=typeParameters#>> action<#=paramList#>, out TaskHandle handle)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            tasks.Enqueue (new DelegateTask<<#=typeParameters#>> (action<#=argList#>), out handle);
        }
<#}#>
    }
}