namespace Moth.Tasks
{
    using System;

    /* -------------------------------------------------------------- *
     * Generated by TaskFunctionPointerFromExtensions.tt T4 template. *
     * This file should not be edited manually.                       *
     * -------------------------------------------------------------- */

    /// <summary>
    /// Provides extension methods for creating <see cref="FunctionPointerTask"/> instances.
    /// </summary>
    public static unsafe partial class Task
    {
        /// <summary>
        /// Create a <see cref="FunctionPointerTask"/> that encapsulates a function pointer.
        /// </summary>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <returns>A new <see cref="FunctionPointerTask"/> that will invoke the function pointer when run.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask From (delegate*<void> action)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask (action);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1> From<T1> (delegate*<T1, void> action, T1 arg1)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1> (action, arg1);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2> From<T1, T2> (delegate*<T1, T2, void> action, T1 arg1, T2 arg2)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2> (action, arg1, arg2);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3> From<T1, T2, T3> (delegate*<T1, T2, T3, void> action, T1 arg1, T2 arg2, T3 arg3)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3> (action, arg1, arg2, arg3);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4> From<T1, T2, T3, T4> (delegate*<T1, T2, T3, T4, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4> (action, arg1, arg2, arg3, arg4);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5> From<T1, T2, T3, T4, T5> (delegate*<T1, T2, T3, T4, T5, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5> (action, arg1, arg2, arg3, arg4, arg5);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6> From<T1, T2, T3, T4, T5, T6> (delegate*<T1, T2, T3, T4, T5, T6, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6> (action, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7> From<T1, T2, T3, T4, T5, T6, T7> (delegate*<T1, T2, T3, T4, T5, T6, T7, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8> From<T1, T2, T3, T4, T5, T6, T7, T8> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9> From<T1, T2, T3, T4, T5, T6, T7, T8, T9> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> From<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> From<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> From<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> From<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> From<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> From<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
        }

        /// <summary>
        /// Create a <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16}"/> that encapsulates a function pointer.
        /// </summary>
        /// <returns>A new <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16}"/> that will invoke the function pointer when run with the supplied arguments.</returns>
        /// <param name="action">Function pointer to encapsulate.</param>
        /// <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
        /// <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
        /// <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
        /// <param name="arg16">The 16th argument to run <paramref name="action"/> with.</param>
        /// <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
        /// <typeparam name="T16">The type of the 16th parameter of <paramref name="action"/>.</typeparam>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        public static FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> From<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
        {
            if (action == null)
            {
                throw new ArgumentNullException (nameof (action));
            }

            return new FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
        }
    }
}