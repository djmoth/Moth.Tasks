<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Moth.Tasks
{
    using System;
    using System.Runtime.InteropServices;

    /* ---------------------------------------- *
     * Generated by DelegateTask.tt T4 template *
     * This file should not be edited manually. *
     * ---------------------------------------- */

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with no parameters.
    /// </summary>
    public readonly struct DelegateTask : ITask<Unit, Unit>
    {
        private readonly Action action;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action"/> to invoke on <see cref="Run"/>.</param>
        public DelegateTask (Action action) => this.action = action;

        /// <summary>
        /// Invokes the encapsulated <see cref="Action"/>.
        /// </summary>
        public Unit Run (Unit _)
        {
            action ();
            return default;
        }
    }
<# int maxParameterCount = 16;
for (int i = 1; i <= maxParameterCount; i++)
{
    string typeParameters = "T1";

    for (int t = 2; t <= i; t++)
        typeParameters += ", T" + t.ToString ();
#>

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with <#=i#> parameters.
    /// </summary>
<# for (int t = 1; t <= i; t++) WriteLine ($"    /// <typeparam name=\"T{t}\">Type of parameter {t}.</typeparam>");#>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<<#=typeParameters#>> : ITask<Unit, Unit>
    {
        private readonly Action<<#=typeParameters#>> action;
<# for (int t = 1; t <= i; t++) WriteLine ($"        private readonly T{t} arg{t};");#>

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{<#=typeParameters#>}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{<#=typeParameters#>}"/> to invoke on <see cref="Run"/>.</param>
<# string paramList = "";
for (int t = 1; t <= i; t++) 
{
    paramList += ", T" + t.ToString () + " arg" + t.ToString ();
    WriteLine ($"        /// <param name=\"arg{t}\">Argument {t} to invoke <paramref name=\"action\"/> with.</param>");
}#>
        public DelegateTask (Action<<#=typeParameters#>> action<#=paramList#>)
        {
            this.action = action;
<# for (int t = 1; t <= i; t++) WriteLine ($"            this.arg{t} = arg{t};");#>
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{<#=typeParameters#>}"/> with the provided arguments.
        /// </summary>
<# string argList = "arg1";
for (int t = 2; t <= i; t++)
    argList += ", arg" + t.ToString ();#>
        public Unit Run (Unit _)
        {
            action (<#=argList#>);
            return default;
        }
    }
<#}#>
}