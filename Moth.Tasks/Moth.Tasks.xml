<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Moth.Tasks</name>
    </assembly>
    <members>
        <member name="T:Moth.Tasks.ChainedTask`2">
            <summary>
            Represents a task that is composed of two other tasks that are run in sequence.
            </summary>
            <typeparam name="T1">Type of first task.</typeparam>
            <typeparam name="T2">Type of second task.</typeparam>
        </member>
        <member name="M:Moth.Tasks.ChainedTask`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.ChainedTask`2"/> struct.
            </summary>
            <param name="first">First task.</param>
            <param name="second">Second task.</param>
        </member>
        <member name="M:Moth.Tasks.ChainedTask`2.Run">
            <summary>
            Runs the first task, then the second task.
            </summary>
        </member>
        <member name="T:Moth.Tasks.ChainedTask`4">
            <summary>
            Represents a task that is composed of two other tasks that are run in sequence. The result of the first task is passed as an argument to the second task.
            </summary>
            <typeparam name="T1">Type of first task.</typeparam>
            <typeparam name="T2">Type of second task.</typeparam>
            <typeparam name="T1Arg">Type of the first task's argument.</typeparam>
            <typeparam name="T1ResultT2Arg">Type of the first task's result and second task's argument.</typeparam>
        </member>
        <member name="M:Moth.Tasks.ChainedTask`4.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.ChainedTask`4"/> struct.
            </summary>
            <param name="first">First task.</param>
            <param name="second">Second task.</param>
        </member>
        <member name="M:Moth.Tasks.ChainedTask`4.Run(`2)">
            <summary>
            Runs the first task, then the second task. The result of the first task is passed as an argument to the second task.
            </summary>
            <param name="arg">Argument to supply to first task.</param>
        </member>
        <member name="T:Moth.Tasks.ChainedTask`5">
            <summary>
            Represents a task that is composed of two other tasks that are run in sequence. The result of the first task is passed as an argument to the second task.
            </summary>
            <typeparam name="T1">Type of first task.</typeparam>
            <typeparam name="T2">Type of second task.</typeparam>
            <typeparam name="T1Arg">Type of the first task's argument.</typeparam>
            <typeparam name="T1ResultT2Arg">Type of the first task's result and second task's argument.</typeparam>
            <typeparam name="T2Result">Type of the second tasks result.</typeparam>
        </member>
        <member name="M:Moth.Tasks.ChainedTask`5.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.ChainedTask`5"/> struct.
            </summary>
            <param name="first">First task.</param>
            <param name="second">Second task.</param>
        </member>
        <member name="M:Moth.Tasks.ChainedTask`5.Run(`2)">
            <summary>
            Runs the first task, then the second task. The result of the first task is passed as an argument to the second task.
            </summary>
            <param name="arg">Argument to supply to first task.</param>
            <returns>Result returned by second task.</returns>
        </member>
        <member name="T:Moth.Tasks.DelegateTask">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with no parameters.
            </summary>
        </member>
        <member name="M:Moth.Tasks.DelegateTask.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask.Run"/>.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action"/>.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`1">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 1 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`1.#ctor(System.Action{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`1"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`1"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`1.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`1.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`1"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`2">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 2 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`2.#ctor(System.Action{`0,`1},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`2"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`2"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`2.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`2.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`2"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`3">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 3 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`3.#ctor(System.Action{`0,`1,`2},`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`3"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`3"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`3.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`3.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`3"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`4">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 4 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`4.#ctor(System.Action{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`4"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`4"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`4.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`4.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`4"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`5">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 5 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`5.#ctor(System.Action{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`5"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`5"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`5.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`5.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`5"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`6">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 6 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`6.#ctor(System.Action{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`6"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`6"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`6.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`6.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`6"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`7">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 7 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`7.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6},`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`7"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`7"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`7.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`7.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`7"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`8">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 8 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`8.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7},`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`8"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`8"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`8.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`8.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`8"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`9">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 9 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`9.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8},`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`9"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`9"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`9.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`9.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`9"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`10">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 10 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`10.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`10"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`10"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`10.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`10.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`10"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`11">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 11 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`11.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`11"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`11"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`11.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`11.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`11"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`12">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 12 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`12.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`12"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`12"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`12.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`12.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`12"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`13">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 13 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`13.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`13"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`13"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`13.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`13.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`13"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`14">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 14 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`14.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`14"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`14"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`14.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`14.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`14"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`15">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 15 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
            <typeparam name="T15">Type of parameter 15.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`15.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`15"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`15"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`15.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
            <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`15.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`15"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`16">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 16 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
            <typeparam name="T15">Type of parameter 15.</typeparam>
            <typeparam name="T16">Type of parameter 16.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`16.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`16"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`16"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`16.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
            <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
            <param name="arg16">Argument 16 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`16.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`16"/> with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DisposableTaskMetadataBase`1">
            <summary>
            Represents a task that can be disposed.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DisposableTaskMetadataBase`1"/> class.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})"/>
        </member>
        <member name="P:Moth.Tasks.DisposableTaskMetadataBase`1.IsDisposable">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadataBase`1.Dispose(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.DisposableTaskMetadata`3">
            <summary>
            Represents a task that can be disposed and takes an argument and returns a result.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`3.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DisposableTaskMetadata`3"/> class.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})"/>
        </member>
        <member name="P:Moth.Tasks.DisposableTaskMetadata`3.HasArgs">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.DisposableTaskMetadata`3.HasResult">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`3.Run(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <summary>
            Runs the task with <see langword="default"/> as argument and disposes it and discards the result.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`3.Run(Moth.Tasks.TaskQueue.TaskDataAccess,`1)">
            <summary>
            Runs the task with an argument and disposes it and discards the result.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`3.Moth#Tasks#IRunnableTaskMetadata{TArg,TResult}#Run(Moth.Tasks.TaskQueue.TaskDataAccess,`1)">
            <summary>
            Runs the task with an argument and disposes it and returns the result.
            </summary>
            <inheritdoc />
            <returns>The result of the task.</returns>
        </member>
        <member name="T:Moth.Tasks.DisposableTaskMetadata`2">
            <summary>
            Represents a task that can be disposed and takes an argument and returns no result.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`2.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DisposableTaskMetadata`2"/> class.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})"/>
        </member>
        <member name="P:Moth.Tasks.DisposableTaskMetadata`2.HasArgs">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.DisposableTaskMetadata`2.HasResult">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`2.Run(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <summary>
            Runs the task with <see langword="default"/> as argument and disposes it.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`2.Run(Moth.Tasks.TaskQueue.TaskDataAccess,`1)">
            <summary>
            Runs the task with an argument and disposes it.
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.DisposableTaskMetadata`1">
            <summary>
            Represents a task that can be disposed and takes no argument and returns no result.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DisposableTaskMetadata`1"/> class.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})"/>
        </member>
        <member name="P:Moth.Tasks.DisposableTaskMetadata`1.HasArgs">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.DisposableTaskMetadata`1.HasResult">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.DisposableTaskMetadata`1.Run(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <summary>
            Runs the task and disposes it.
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.DisposableTaskWithHandle`3">
            <summary>
            Encapsulates a task which implements <see cref="T:System.IDisposable"/>, enqueued with a <see cref="T:Moth.Tasks.TaskHandle"/>.
            </summary>
            <typeparam name="TTask">Type of task.</typeparam>
            <typeparam name="TArg">Type of task argument.</typeparam>
            <typeparam name="TResult">Type of task result.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DisposableTaskWithHandle`3.#ctor(`0@,Moth.Tasks.TaskHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DisposableTaskWithHandle`3"/> struct.
            </summary>
            <param name="task">Task data.</param>
            <param name="handle">Task handle.</param>
        </member>
        <member name="M:Moth.Tasks.DisposableTaskWithHandle`3.Run(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.DisposableTaskWithHandle`3.Dispose">
            <summary>
            Dispose of encapsulated task, and notify handle that task was completed.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask">
            <summary>
            Task encapsulating a delegate*{void} function pointer.
            </summary>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask.#ctor()">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask"/> struct.
            </summary>
            The <param name="function">delegate*{void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask.Run"/>.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask.Run">
            <summary>
            Invokes the encapsulated delegate*{void}.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`1">
            <summary>
            Task encapsulating a delegate*{T1, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`1.#ctor(,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`1"/> struct.
            </summary>
            <param name="action">delegate*{T1, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`1.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`1.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`2">
            <summary>
            Task encapsulating a delegate*{T1, T2, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`2.#ctor(,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`2"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`2.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`2.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`3">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`3.#ctor(,`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`3"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`3.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`3.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`4">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`4.#ctor(,`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`4"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`4.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`4.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`5">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`5.#ctor(,`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`5"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`5.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`5.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`6">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`6.#ctor(,`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`6"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`6.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`6.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`7">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`7.#ctor(,`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`7"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`7.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`7.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`8">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`8.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`8"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`8.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`8.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`9">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`9.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`9"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`9.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`9.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`10">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`10.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`10"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`10.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`10.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`11">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`11.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`11"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`11.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`11.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`12">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`12.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`12"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`12.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`12.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`13">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`13.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`13"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`13.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`13.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`14">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`14.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`14"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`14.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`14.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`15">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
            <typeparam name="T15">Type of parameter 15.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`15.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`15"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`15.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
            <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`15.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.FunctionPointerTask`16">
            <summary>
            Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void} function pointer.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
            <typeparam name="T15">Type of parameter 15.</typeparam>
            <typeparam name="T16">Type of parameter 16.</typeparam>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`16.#ctor(,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.FunctionPointerTask`16"/> struct.
            </summary>
            <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void} to invoke on <see cref="M:Moth.Tasks.FunctionPointerTask`16.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
            <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
            <param name="arg16">Argument 16 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.FunctionPointerTask`16.Run">
            <summary>
            Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void} with the provided arguments.
            </summary>
        </member>
        <member name="T:Moth.Tasks.IDisposableTaskMetadata">
            <summary>
            Represents a task that can be disposed.
            </summary>
        </member>
        <member name="M:Moth.Tasks.IDisposableTaskMetadata.Dispose(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <summary>
            Disposes of the task.
            </summary>
            <param name="access"><see cref="T:Moth.Tasks.TaskQueue.TaskDataAccess"/> instance allowing for retrieval of task data.</param>
        </member>
        <member name="T:Moth.Tasks.IProfiler">
            <summary>
            Describes a profiler which can measure the run time of a task.
            </summary>
        </member>
        <member name="M:Moth.Tasks.IProfiler.BeginTask(System.String)">
            <summary>
            Signals the beginning of a new task.
            </summary>
            <param name="task">Name of task type.</param>
        </member>
        <member name="M:Moth.Tasks.IProfiler.EndTask">
            <summary>
            Signals the completion of a task.
            </summary>
        </member>
        <member name="T:Moth.Tasks.IRunnableTaskMetadata">
            <summary>
            Represents a task that can be run with no argument and returns no result.
            </summary>
        </member>
        <member name="M:Moth.Tasks.IRunnableTaskMetadata.Run(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <summary>
            Runs the task.
            </summary>
            <param name="access"><see cref="T:Moth.Tasks.TaskQueue.TaskDataAccess"/> instance allowing for retrieval of task data.</param>
        </member>
        <member name="T:Moth.Tasks.IRunnableTaskMetadata`1">
            <summary>
            Represents a task that can be run with an argument and returns no result.
            </summary>
            <typeparam name="TArg">Type of the argument.</typeparam>
        </member>
        <member name="M:Moth.Tasks.IRunnableTaskMetadata`1.Run(Moth.Tasks.TaskQueue.TaskDataAccess,`0)">
            <summary>
            Runs the task with an argument.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.IRunnableTaskMetadata.Run(Moth.Tasks.TaskQueue.TaskDataAccess)"/>/>
            <param name="access"/>
            <param name="arg">Argument to supply to task.</param>
        </member>
        <member name="T:Moth.Tasks.IRunnableTaskMetadata`2">
            <summary>
            Represents a task that can be run with an argument and returns a result.
            </summary>
            <inheritdoc cref="T:Moth.Tasks.IRunnableTaskMetadata`1"/>
            <typeparam name="TArg"/>
            <typeparam name="TResult">The type of the task result.</typeparam>
        </member>
        <member name="M:Moth.Tasks.IRunnableTaskMetadata`2.Run(Moth.Tasks.TaskQueue.TaskDataAccess,`0)">
            <summary>
            Runs the task with an argument and returns a result.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.IRunnableTaskMetadata`1.Run(Moth.Tasks.TaskQueue.TaskDataAccess,`0)"/>/>
            <param name="access"/>
            <param name="arg"/>
            <returns>The result of the task.</returns>
        </member>
        <member name="T:Moth.Tasks.ITask">
            <summary>
            Interface for a task taking no arguments.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITask.Run">
            <summary>
            Run the task.
            </summary>
        </member>
        <member name="T:Moth.Tasks.ITask`1">
            <summary>
            Interface for a task taking an argument.
            </summary>
            <typeparam name="TArg">Type of argument to pass to the task.</typeparam>
        </member>
        <member name="M:Moth.Tasks.ITask`1.Run(`0)">
            <summary>
            Run the task.
            </summary>
            <param name="arg">Task argument.</param>
        </member>
        <member name="T:Moth.Tasks.ITask`2">
            <summary>
            Interface for a task taking an argument.
            </summary>
            <typeparam name="TArg">Type of argument to pass to the task.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Moth.Tasks.ITask`2.Run(`0)">
            <summary>
            Run the task.
            </summary>
            <param name="arg">Task argument.</param>
            <returns>Task result.</returns>
        </member>
        <member name="T:Moth.Tasks.ITaskType">
            <summary>
            Interface for a task type.
            </summary>
        </member>
        <member name="T:Moth.Tasks.ITaskDataStore">
            <summary>
            Interface for a task data store.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskDataStore.FirstTask">
            <summary>
            Gets the index of the first byte of first task data in the store.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskDataStore.LastTaskEnd">
            <summary>
            Gets the index of the last byte of the last task data in the store.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskDataStore.Size">
            <summary>
            Gets the total size of the data in the store in bytes.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskDataStore.Capacity">
            <summary>
            Gets the current capacity of the store in bytes.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskDataStore.Clear">
            <summary>
            Clears the task data store.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskDataStore.Dequeue``1(Moth.Tasks.ITaskMetadata{``0})">
            <summary>
            Dequeues a task from the store.
            </summary>
            <typeparam name="T">The type of the task data.</typeparam>
            <param name="taskInfo"><see cref="T:Moth.Tasks.ITaskMetadata`1"/> instance containing task type information.</param>
            <returns>The task data.</returns>
        </member>
        <member name="M:Moth.Tasks.ITaskDataStore.Enqueue``1(``0@,Moth.Tasks.ITaskMetadata{``0})">
            <summary>
            Enqueues a task into the store.
            </summary>
            <typeparam name="T">The type of the task data.</typeparam>
            <param name="task">The task data to enqueue.</param>
            <param name="taskInfo"><see cref="T:Moth.Tasks.ITaskMetadata`1"/> instance containing task type information.</param>
        </member>
        <member name="M:Moth.Tasks.ITaskDataStore.Insert``1(System.Int32@,System.Int32@,``0@,Moth.Tasks.ITaskMetadata{``0})">
            <summary>
            Inserts a task into the store at a specific index.
            </summary>
            <typeparam name="T">The type of the task data.</typeparam>
            <param name="dataIndex">Insertion index of unmanaged data.</param>
            <param name="refIndex">Inseration index of managed references.</param>
            <param name="task">Task data to insert.</param>
            <param name="taskInfo"><see cref="T:Moth.Tasks.ITaskMetadata`1"/> instance containing task type information.</param>
        </member>
        <member name="M:Moth.Tasks.ITaskDataStore.Skip(Moth.Tasks.ITaskMetadata)">
            <summary>
            Skips a task in the store.
            </summary>
            <param name="taskInfo"><see cref="T:Moth.Tasks.ITaskMetadata"/> instance containing task type information.</param>
        </member>
        <member name="T:Moth.Tasks.ITaskHandleManager">
            <summary>
            Manages task handles.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskHandleManager.CreateTaskHandle">
            <summary>
            Create a new task handle.
            </summary>
            <returns>A new unique <see cref="T:Moth.Tasks.TaskHandle"/> associated with this <see cref="T:Moth.Tasks.TaskHandleManager"/>.</returns>
        </member>
        <member name="M:Moth.Tasks.ITaskHandleManager.IsTaskComplete(Moth.Tasks.TaskHandle)">
            <summary>
            Check if a task has completed.
            </summary>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> to check.</param>
            <returns><see langword="true"/> if task has completed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Moth.Tasks.ITaskHandleManager.Clear">
            <summary>
            Clear all task handles.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskHandleManager.WaitForCompletion(Moth.Tasks.TaskHandle,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Wait for a task to complete.
            </summary>
            <param name="handle">Handle to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="token">Cancellation token to observe.</param>
            <returns><see langword="true"/> if task was completed, <see langword="false"/> if timeout was reached.</returns>
        </member>
        <member name="M:Moth.Tasks.ITaskHandleManager.NotifyTaskCompletion(Moth.Tasks.TaskHandle)">
            <summary>
            Notify that a task has completed.
            </summary>
            <param name="handle">Handle to notify completion for.</param>
        </member>
        <member name="T:Moth.Tasks.ITaskMetadata">
            <summary>
            Contains metadata about a task type.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskMetadata.ID">
            <summary>
            Gets the ID of the task type in an <see cref="T:Moth.Tasks.ITaskMetadataCache"/>.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskMetadata.Type">
            <summary>
            Gets the runtime <see cref="T:System.Type"/> of the task.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskMetadata.UnmanagedSize">
            <summary>
            Gets the size of unmanaged task data in bytes.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskMetadata.ReferenceCount">
            <summary>
            Gets the number of reference fields in the task.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskMetadata.IsManaged">
            <summary>
            Gets whether the task contains reference types.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskMetadata.IsDisposable">
            <summary>
            Gets whether the task implements <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskMetadata.HasArgs">
            <summary>
            Gets whether the task takes an argument.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskMetadata.HasResult">
            <summary>
            Gets whether the task returns a result.
            </summary>
        </member>
        <member name="T:Moth.Tasks.ITaskMetadataCache">
            <summary>
            Interface for a task metadata cache.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskMetadataCache.GetTask(System.Int32)">
            <summary>
            Get the metadata of a task by ID.
            </summary>
            <param name="id">ID of task.</param>
            <returns><see cref="T:Moth.Tasks.ITaskMetadata"/> instance with ID of <paramref name="id"/>.</returns>
        </member>
        <member name="M:Moth.Tasks.ITaskMetadataCache.GetTask``1">
            <summary>
            Get the metadata of a task by type.
            </summary>
            <typeparam name="TTask">Type of task.</typeparam>
            <returns><see cref="T:Moth.Tasks.ITaskMetadata"/> instance for the type <typeparamref name="TTask"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.ITaskMetadataProvider">
            <summary>
            Interface for a task metadata provider.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskMetadataProvider.Create``1(System.Int32)">
            <summary>
            Create a task metadata instance for a task type.
            </summary>
            <typeparam name="TTask">Type of task.</typeparam>
            <param name="id">ID to give the instance.</param>
            <returns>A new task metadata instance.</returns>
        </member>
        <member name="T:Moth.Tasks.ITaskMetadata`1">
            <summary>
            Represents a task that takes no argument and returns no result.
            </summary>
            <typeparam name="TTask">Type of task.</typeparam>
        </member>
        <member name="M:Moth.Tasks.ITaskMetadata`1.Serialize(`0@,System.Span{System.Byte},Moth.IO.Serialization.ObjectWriter)">
            <summary>
            Serializes the task data.
            </summary>
            <param name="task">Task data to serialize.</param>
            <param name="destination">Destination to serialize to.</param>
            <param name="refWriter"><see cref="T:Moth.IO.Serialization.ObjectWriter"/> for handling any reference fields.</param>
        </member>
        <member name="M:Moth.Tasks.ITaskMetadata`1.Deserialize(`0@,System.ReadOnlySpan{System.Byte},Moth.IO.Serialization.ObjectReader)">
            <summary>
            Deserializes the task data.
            </summary>
            <param name="task">Deserialized task data.</param>
            <param name="source">Source to deserialize from.</param>
            <param name="refReader"><see cref="T:Moth.IO.Serialization.ObjectReader"/> for handling any reference fields.</param>
        </member>
        <member name="T:Moth.Tasks.ITaskQueue">
            <summary>
            Interface for a queue of tasks taking no arguments.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue.Enqueue``1(``0@)">
            <summary>
            Enqueues an <see cref="T:Moth.Tasks.ITask"/> to be run later.
            </summary>
            <typeparam name="TTask">Type of task to run.</typeparam>
            <param name="task">Task data.</param>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueues an <see cref="T:Moth.Tasks.ITask"/> to be run later, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <typeparam name="TTask">Type of task to run.</typeparam>
            <param name="task">Task data.</param>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue.RunNextTask(Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <summary>
            Blocks until a task is ready in the queue, then runs it.
            </summary>
            <param name="profiler"><see cref="T:Moth.Tasks.IProfiler"/> to profile the run-time of the task.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> to observe when waiting for a task. Does not cancel actual task execution.</param>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue.RunNextTask(System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue.RunNextTask(Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>
            <param name="exception"><see cref="T:System.Exception"/> thrown if task failed. Is <see langword="null"/> if task was run successfully.</param>
            <param name="profiler"/>
            <param name="token"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue, if present. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <param name="profiler"><see cref="T:Moth.Tasks.IProfiler"/> to profile the run-time of the task.</param>
            <returns><see langword="true"/> if a task was run, <see langword="false"/> if the <see cref="T:Moth.Tasks.TaskQueue"/> is empty.</returns>
            <remarks>
            Please note that the return value does not indicate if a task was successful. The method will return <see langword="true"/> if a task was ready in the queue, regardless of whether an exception occured.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue.TryRunNextTask(System.Exception@,Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue, if present. Provides an <see cref="T:System.Exception"/> thrown by the task, in case it fails.
            May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)"/>
            <param name="exception"><see cref="T:System.Exception"/> thrown if task failed. Is <see langword="null"/> if task was run successfully.</param>
            <param name="profiler"/>
        </member>
        <member name="T:Moth.Tasks.ITaskQueueEnqueueExtensions">
            <summary>
            Extends <see cref="T:Moth.Tasks.ITaskQueue"/> to allow generic <see cref="T:System.Action"/>s to be enqueued as tasks.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue(Moth.Tasks.ITaskQueue,System.Action)">
            <summary>
            Enqueue an action to be run later.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``1(Moth.Tasks.ITaskQueue,System.Action{``0},``0)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``1(Moth.Tasks.ITaskQueue,System.Action{``0},``0,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``2(Moth.Tasks.ITaskQueue,System.Action{``0,``1},``0,``1)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``2(Moth.Tasks.ITaskQueue,System.Action{``0,``1},``0,``1,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``3(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``3(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2},``0,``1,``2,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``4(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``4(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3},``0,``1,``2,``3,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``5(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``5(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``6(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``6(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``7(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``7(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``8(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``8(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``9(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``9(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``10(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``10(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``11(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``11(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``12(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``12(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``13(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``13(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``14(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``14(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``15(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``15(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``16(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <param name="arg16">The 16th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T16">The type of the 16th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.ITaskQueueEnqueueExtensions.Enqueue``16(Moth.Tasks.ITaskQueue,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an action to be run later with supplied arguments, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <param name="tasks"><see cref="T:Moth.Tasks.ITaskQueue"/> in which the action is enqueued.</param>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <param name="arg16">The 16th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T16">The type of the 16th parameter of <paramref name="action"/>.</typeparam>
            <param name="handle"><see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.ITaskQueue"/> has been disposed.</exception>
        </member>
        <member name="T:Moth.Tasks.ITaskQueue`2">
            <summary>
            Interface for a queue of tasks taking an argument of type <typeparamref name="TArg"/> and returning a result of <typeparamref name="TResult"/>.
            </summary>
            <inheritdoc cref="T:Moth.Tasks.ITaskQueue`1"/>
            <typeparam name="TArg"/>
            <typeparam name="TResult">Type of result that tasks will return.</typeparam>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`2.Enqueue``1(``0@)">
            <summary>
            Enqueues an <see cref="T:Moth.Tasks.ITask`2"/> to be run later.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`1.Enqueue``1(``0@)"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`2.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueues an <see cref="T:Moth.Tasks.ITask`2"/> to be run later, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`1.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`2.RunNextTask(`0,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <summary>
            Blocks until a task is ready in the queue, then runs it and returns the result. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`1.RunNextTask(`0,Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>
            <param name="arg"/>
            <param name="profiler"/>
            <param name="token"/>
            <returns>Result of the task.</returns>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`2.RunNextTask(`0,System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <summary>
            Blocks until a task is ready in the queue, then runs it with <paramref name="arg"/> as argument and returns the result. Provides an <see cref="T:System.Exception"/> thrown by the task, in case it fails. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`1.RunNextTask(`0,System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`2.RunNextTask(`0,Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>/>
            <param name="arg"/>
            <param name="exception"/>
            <param name="profiler"/>
            <param name="token"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`2.TryRunNextTask(`0,`1@,Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue, if present, with <paramref name="arg"/> as argument and returns the result through <paramref name="result"/>. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`1.TryRunNextTask(`0,Moth.Tasks.IProfiler)"/>
            <param name="arg"/>
            <param name="result">Result of the task.</param>
            <param name="profiler"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`2.TryRunNextTask(`0,`1@,System.Exception@,Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue, if present, with <paramref name="arg"/> as argument and returns the result through <paramref name="result"/>. Provides an <see cref="T:System.Exception"/> thrown by the task, in case it fails. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`1.TryRunNextTask(`0,System.Exception@,Moth.Tasks.IProfiler)"/>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`2.TryRunNextTask(`0,`1@,Moth.Tasks.IProfiler)"/>
            <param name="arg"/>
            <param name="result"/>
            <param name="exception"/>
            <param name="profiler"/>
        </member>
        <member name="T:Moth.Tasks.ITaskQueue`1">
            <summary>
            Interface for a queue of tasks taking an argument of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="TArg">Type of argument that tasks will take.</typeparam>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`1.Enqueue``1(``0@)">
            <summary>
            Enqueues an <see cref="T:Moth.Tasks.ITask`1"/> to be run later.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue.Enqueue``1(``0@)"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`1.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueues an <see cref="T:Moth.Tasks.ITask`1"/> to be run later, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`1.RunNextTask(`0,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <summary>
            Blocks until a task is ready in the queue, then runs it with <paramref name="arg"/> as argument. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue.RunNextTask(Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>
            <param name="arg">Argument to run task with.</param>
            <param name="profiler"/>
            <param name="token"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`1.RunNextTask(`0,System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <summary>
            Blocks until a task is ready in the queue, then runs it with <paramref name="arg"/> as argument. Provides an <see cref="T:System.Exception"/> thrown by the task, in case it fails. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue.RunNextTask(System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`1.RunNextTask(`0,Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>
            <param name="arg"/>
            <param name="exception"/>
            <param name="profiler"/>
            <param name="token"/>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`1.TryRunNextTask(`0,Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue, if present, with <paramref name="arg"/> as argument. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)"/>
            <param name="arg">Argument to run task with.</param>
            <param name="profiler"/>
            <returns>
            <see langword="true"/> if a task was run, <see langword="false"/> if the <see cref="T:Moth.Tasks.TaskQueue"/> is empty.
            </returns>
            <remarks>
            Note that the return value does not indicate if a task was successful. The method will return <see langword="true"/> if a task was ready in the queue, regardless of whether an exception occured.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.ITaskQueue`1.TryRunNextTask(`0,System.Exception@,Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue, if present. Provides an <see cref="T:System.Exception"/> thrown by the task, in case it fails. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue.TryRunNextTask(System.Exception@,Moth.Tasks.IProfiler)"/>
            <inheritdoc cref="M:Moth.Tasks.ITaskQueue`1.TryRunNextTask(`0,Moth.Tasks.IProfiler)"/>
            <param name="arg"/>
            <param name="exception"/>
            <param name="profiler"/>
        </member>
        <member name="T:Moth.Tasks.ITaskReferenceStore">
            <summary>
            Stores reference fields from tasks.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskReferenceStore.Start">
            <summary>
            Gets the index of the first reference.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskReferenceStore.End">
            <summary>
            Gets the index after the last reference.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskReferenceStore.Count">
            <summary>
            Gets the total number of references stored.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskReferenceStore.Capacity">
            <summary>
            Gets the current capacity of the store.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskReferenceStore.Read">
            <summary>
            Gets the <see cref="T:Moth.IO.Serialization.ObjectReader"/> for reading stored references.
            </summary>
        </member>
        <member name="P:Moth.Tasks.ITaskReferenceStore.Write">
            <summary>
            Gets the <see cref="T:Moth.IO.Serialization.ObjectWriter"/> for writing references.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskReferenceStore.Clear">
            <summary>
            Clears all stored references.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITaskReferenceStore.EnterInsertContext(System.Int32@,System.Int32,Moth.IO.Serialization.ObjectWriter@)">
            <summary>
            Enters an insert context to insert references.
            </summary>
            <param name="insertIndex">The index to start inserting at.</param>
            <param name="refCount">The total number of references that will be inserted.</param>
            <param name="insertWriter">The <see cref="T:Moth.IO.Serialization.ObjectWriter"/> to write references to.</param>
            <returns>A <see cref="T:Moth.Tasks.TaskReferenceInsertContext"/> on which <see cref="M:Moth.Tasks.TaskReferenceInsertContext.Dispose"/> must be called when done.</returns>
        </member>
        <member name="M:Moth.Tasks.ITaskReferenceStore.Skip(System.Int32)">
            <summary>
            Skips a number of references.
            </summary>
            <param name="refCount">The number of references to skip.</param>
        </member>
        <member name="T:Moth.Tasks.IWorker">
            <summary>
            Interface for a worker.
            </summary>
        </member>
        <member name="P:Moth.Tasks.IWorker.IsStarted">
            <summary>
            Gets a value indicating whether the worker is started.
            </summary>
        </member>
        <member name="M:Moth.Tasks.IWorker.Start">
            <summary>
            Start the worker.
            </summary>
        </member>
        <member name="M:Moth.Tasks.IWorker.Join">
            <summary>
            Wait for the worker to finish.
            </summary>
        </member>
        <member name="T:Moth.Tasks.IWorkerThread">
            <summary>
            Represents a worker thread.
            </summary>
        </member>
        <member name="M:Moth.Tasks.IWorkerThread.Start(System.Threading.ThreadStart)">
            <summary>
            Start the worker thread.
            </summary>
            <param name="method">Method to run.</param>
        </member>
        <member name="M:Moth.Tasks.IWorkerThread.Join">
            <summary>
            Join the worker thread.
            </summary>
        </member>
        <member name="T:Moth.Tasks.ProfilerProvider">
            <summary>
            Represents a method that provides an <see cref="T:Moth.Tasks.IProfiler"/> for a <see cref="T:Moth.Tasks.IWorker"/>, or <see langword="null"/> if profiling is not desired.
            </summary>
            <param name="worker">The <see cref="T:Moth.Tasks.IWorker"/>.</param>
            <returns>An <see cref="T:Moth.Tasks.IProfiler"/> for the <paramref name="worker"/>, or <see langword="null"/> if profiling is not desired.</returns>
            <remarks>
            The method does not have to provide a unique <see cref="T:Moth.Tasks.IProfiler"/> for each <see cref="T:Moth.Tasks.IWorker"/>, yet in that case it must be able to differentiate between <see cref="T:Moth.Tasks.IWorker"/>s on its own, so as their calls to <see cref="M:Moth.Tasks.IProfiler.BeginTask(System.String)"/> and <see cref="M:Moth.Tasks.IProfiler.EndTask"/> don't interfere.
            </remarks>
        </member>
        <member name="T:Moth.Tasks.TaskDataStore">
            <summary>
            Stores task data.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskDataStore.#ctor(System.Int32,Moth.Tasks.ITaskReferenceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskDataStore"/> class with a specified data starting capacity.
            </summary>
            <param name="dataCapacity">Starting capacity of unmanaged task data.</param>
            <param name="taskReferenceStore"><see cref="T:Moth.Tasks.ITaskReferenceStore"/> to use for storing task reference fields.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataCapacity"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="taskReferenceStore"/> is <see langword="null"/>.</exception>"
        </member>
        <member name="P:Moth.Tasks.TaskDataStore.FirstTask">
            <inheritdoc/>
        </member>
        <member name="P:Moth.Tasks.TaskDataStore.LastTaskEnd">
            <inheritdoc/>
        </member>
        <member name="P:Moth.Tasks.TaskDataStore.Size">
            <inheritdoc/>
        </member>
        <member name="P:Moth.Tasks.TaskDataStore.Capacity">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskDataStore.Enqueue``1(``0@,Moth.Tasks.ITaskMetadata{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskDataStore.Dequeue``1(Moth.Tasks.ITaskMetadata{``0})">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Moth.Tasks.TaskDataStore.Size"/> is zero.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskDataStore.Skip(Moth.Tasks.ITaskMetadata)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Moth.Tasks.TaskDataStore.Size"/> is zero.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskDataStore.Insert``1(System.Int32@,System.Int32@,``0@,Moth.Tasks.ITaskMetadata{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskDataStore.Clear">
            <inheritdoc/>
        </member>
        <member name="T:Moth.Tasks.Task">
            <summary>
            Provides extension methods for creating <see cref="T:Moth.Tasks.DelegateTask"/> instances.
            </summary>
            <summary>
            Provides extension methods for creating <see cref="T:Moth.Tasks.FunctionPointerTask"/> instances.
            </summary>
        </member>
        <member name="M:Moth.Tasks.Task.From(System.Action)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask"/> that encapsulates an action.
            </summary>
            <param name="action">Action to encapsulate.</param>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask"/> that will invoke the action when run.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``1(System.Action{``0},``0)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`1"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`1"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`2"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`2"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`3"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`3"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`4"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`4"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`5"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`5"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`6"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`6"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`7"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`7"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`8"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`8"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`9"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`9"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`10"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`10"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`11"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`11"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`12"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`12"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`13"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`13"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`14"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`14"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`15"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`15"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Create a <see cref="T:Moth.Tasks.DelegateTask`16"/> that encapsulates an action.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.DelegateTask`16"/> that will invoke the action when run with the supplied arguments.</returns>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <param name="arg16">The 16th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T16">The type of the 16th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From()">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask"/> that encapsulates a function pointer.
            </summary>
            <param name="action">Function pointer to encapsulate.</param>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask"/> that will invoke the function pointer when run.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``1(,``0)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`1"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`1"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``2(,``0,``1)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`2"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`2"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``3(,``0,``1,``2)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`3"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`3"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``4(,``0,``1,``2,``3)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`4"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`4"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``5(,``0,``1,``2,``3,``4)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`5"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`5"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``6(,``0,``1,``2,``3,``4,``5)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`6"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`6"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``7(,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`7"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`7"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``8(,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`8"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`8"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``9(,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`9"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`9"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``10(,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`10"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`10"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``11(,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`11"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`11"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``12(,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`12"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`12"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``13(,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`13"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`13"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``14(,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`14"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`14"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``15(,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`15"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`15"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.Task.From``16(,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Create a <see cref="T:Moth.Tasks.FunctionPointerTask`16"/> that encapsulates a function pointer.
            </summary>
            <returns>A new <see cref="T:Moth.Tasks.FunctionPointerTask`16"/> that will invoke the function pointer when run with the supplied arguments.</returns>
            <param name="action">Function pointer to encapsulate.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <param name="arg16">The 16th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T16">The type of the 16th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Moth.Tasks.TaskExceptionEventArgs">
            <summary>
            Contains information about an exception that was thrown while running a task.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskExceptionEventArgs"/> class.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> thrown.</param>
        </member>
        <member name="P:Moth.Tasks.TaskExceptionEventArgs.Exception">
            <summary>
            Gets the <see cref="T:System.Exception"/> that was thrown.
            </summary>
        </member>
        <member name="T:Moth.Tasks.TaskExtensions">
            <summary>
            Static class for task extensions.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskExtensions.Enqueue``1(``0,Moth.Tasks.ITaskQueue)">
            <summary>
            Enqueues a task in a task queue.
            </summary>
            <typeparam name="TTask">Type of task.</typeparam>
            <param name="task">Task to enqueue.</param>
            <param name="queue">Queue to enqueue in.</param>
        </member>
        <member name="M:Moth.Tasks.TaskExtensions.Then``2(``0,``1)">
            <summary>
            Chains two tasks together.
            </summary>
            <typeparam name="T1">Type of first task.</typeparam>
            <typeparam name="T2">Type of second task.</typeparam>
            <param name="task">First task.</param>
            <param name="secondTask">Second task.</param>
            <returns>A new <see cref="T:Moth.Tasks.ChainedTask`2"/> which runs the tasks in sequence.</returns>
            <exception cref="T:System.NotSupportedException">Either one of <typeparamref name="T1"/> or <typeparamref name="T2"/> implements <see cref="T:System.IDisposable"/>.</exception>
        </member>
        <member name="T:Moth.Tasks.TaskGroup">
            <summary>
            Represents a group of tasks that can be tracked and waited on.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskGroup"/> class.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskGroup.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Moth.Tasks.TaskGroup"/> class.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskGroup.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskGroup.Progress">
            <summary>
            Gets the current progress of the task group, as a value between 0 and 1.
            </summary>
            <remarks>
            Will be 1 if <see cref="P:Moth.Tasks.TaskGroup.TaskCount"/> is 0.
            </remarks>
        </member>
        <member name="P:Moth.Tasks.TaskGroup.TaskCount">
            <summary>
            Gets the number of tasks in the group.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskGroup.CompletedCount">
            <summary>
            Gets the number of tasks that have completed.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskGroup.IsComplete">
            <summary>
            Gets a value indicating whether all tasks in the group have completed.
            </summary>
            <remarks>
            Will be <see langword="true"/> if <see cref="P:Moth.Tasks.TaskGroup.TaskCount"/> is 0.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.TaskGroup.WhenComplete(System.Action)">
            <summary>
            Adds an action to be invoked when all tasks in the group have completed.
            If the tasks have already completed, the action is invoked immediately.
            </summary>
            <remarks>
            The action is invoked on the thread that completes the last task in the group.
            </remarks>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:Moth.Tasks.TaskGroup.Enqueue``1(Moth.Tasks.ITaskQueue,``0@)">
            <summary>
            Enqueues a task in the specified queue.
            </summary>
            <typeparam name="T">Type of task.</typeparam>
            <param name="queue">The <see cref="T:Moth.Tasks.TaskQueue"/> to enqueue the task in.</param>
            <param name="task">The task to enqueue.</param>
        </member>
        <member name="M:Moth.Tasks.TaskGroup.Dispose">
            <summary>
            Disposes of the task group.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskGroup.Dispose(System.Boolean)">
            <summary>
            Disposes of the task group.
            </summary>
            <param name="disposing"><see langword="true"/> if called from <see cref="M:Moth.Tasks.TaskGroup.Dispose"/>.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Moth.Tasks.TaskGroup.IsComplete"/> is not false.</exception>
        </member>
        <member name="T:Moth.Tasks.TaskHandle">
            <summary>
            Handle for checking task status.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskHandle.#ctor(Moth.Tasks.ITaskHandleManager,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskHandle"/> struct.
            </summary>
            <param name="manager">Reference to <see cref="T:Moth.Tasks.TaskHandleManager"/> that the task belongs to.</param>
            <param name="handleID">ID of handle.</param>
        </member>
        <member name="P:Moth.Tasks.TaskHandle.IsValid">
            <summary>
            Gets a value indicating whether the handle is valid.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskHandle.IsComplete">
            <summary>
            Checks if the task has been completed.
            </summary>
            <remarks>
            Please note that this property does not indicate whether the task executed successfully or not.
            </remarks>
        </member>
        <member name="P:Moth.Tasks.TaskHandle.Manager">
            <summary>
            Gets the <see cref="T:Moth.Tasks.TaskHandleManager"/> that the task belongs to.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskHandle.ID">
            <summary>
            Gets the ID of the handle.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskHandle.Equals(Moth.Tasks.TaskHandle)">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskHandle.WaitForCompletion">
            <summary>
            Waits indefinitely until the task has been completed.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskHandle.WaitForCompletion(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for a maximum time in milliseconds for the task to complete.
            </summary>
            <param name="millisceondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="token">Cancellation token to observe.</param>
            <returns><see langword="true"/> if the task was completed before timeout; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskHandle.NotifyTaskCompletion">
            <summary>
            Notifies the task manager that the task has completed.
            </summary>
        </member>
        <member name="T:Moth.Tasks.TaskHandleManager">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskHandleManager.ActiveHandles">
            <summary>
            Gets the number of active task handles that are not yet completed.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskHandleManager.CreateTaskHandle">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskHandleManager.IsTaskComplete(Moth.Tasks.TaskHandle)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is an invalid <see cref="T:Moth.Tasks.TaskHandle"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskHandleManager.WaitForCompletion(Moth.Tasks.TaskHandle,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is an invalid <see cref="T:Moth.Tasks.TaskHandle"/>.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskHandleManager.NotifyTaskCompletion(Moth.Tasks.TaskHandle)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is an invalid <see cref="T:Moth.Tasks.TaskHandle"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Task handle has already been completed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskHandleManager.Clear">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.TaskMetadata">
            <summary>
            Static class for generating <see cref="T:Moth.Tasks.ITaskMetadata"/> instances.
            </summary>
        </member>
        <member name="F:Moth.Tasks.TaskMetadata.Provider">
            <summary>
            <see cref="T:Moth.Tasks.TaskMetadataProvider"/> for creating <see cref="T:Moth.Tasks.ITaskMetadata"/> instances using <see cref="F:Moth.IO.Serialization.Format.Provider"/> for serialization.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskMetadata.Create``1(System.Int32)">
            <summary>
            Creates a new <see cref="T:Moth.Tasks.ITaskMetadata`1"/> instance from a type and ID.
            </summary>
            <typeparam name="TTask">Type of task.</typeparam>
            <param name="id">ID of task.</param>
            <returns>A new <see cref="T:Moth.Tasks.ITaskMetadata`1"/> instance representing the task <typeparamref name="TTask"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.TaskMetadataBase`1">
            <inheritdoc cref="T:Moth.Tasks.ITaskMetadata`1"/>
            <typeparam name="TTask">Type of task.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskMetadataBase`1"/> class.
            </summary>
            <param name="id">ID of task.</param>
            <param name="taskFormat"><see cref="T:Moth.IO.Serialization.IFormat`1"/> to use for serialization.</param>
        </member>
        <member name="P:Moth.Tasks.TaskMetadataBase`1.ID">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadataBase`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadataBase`1.UnmanagedSize">
            <inheritdoc />
            <remarks>
            The unmanaged size is the size of the task data excluding fields of reference types.
            </remarks>
        </member>
        <member name="P:Moth.Tasks.TaskMetadataBase`1.ReferenceCount">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadataBase`1.IsManaged">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadataBase`1.IsDisposable">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadataBase`1.HasArgs">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadataBase`1.HasResult">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadataBase`1.Serialize(`0@,System.Span{System.Byte},Moth.IO.Serialization.ObjectWriter)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadataBase`1.Deserialize(`0@,System.ReadOnlySpan{System.Byte},Moth.IO.Serialization.ObjectReader)">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.TaskMetadataCache">
            <summary>
            Cache of <see cref="T:Moth.Tasks.ITaskMetadata"/>.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskMetadataCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskMetadataCache"/> class, using <see cref="F:Moth.Tasks.TaskMetadata.Provider"/> as <see cref="T:Moth.Tasks.ITaskMetadataProvider"/>.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskMetadataCache.#ctor(Moth.Tasks.ITaskMetadataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskMetadataCache"/> class, using <paramref name="taskInfoProvider"/> as <see cref="T:Moth.Tasks.ITaskMetadataProvider"/>.
            </summary>
            <param name="taskInfoProvider">The <see cref="T:Moth.Tasks.ITaskMetadataProvider"/> to use for creating task information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taskInfoProvider"/> is null.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskMetadataCache.GetTask``1">
            <summary>
            Get a task by type.
            </summary>
            <typeparam name="T">Type of task.</typeparam>
            <returns><see cref="T:Moth.Tasks.ITaskMetadata"/> for <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskMetadataCache.GetTask(System.Int32)">
            <summary>
            Get task by id.
            </summary>
            <param name="id">Assigned id of task.</param>
            <returns><see cref="T:Moth.Tasks.ITaskMetadata"/> for <paramref name="id"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.TaskMetadataProvider">
            <summary>
            Provides <see cref="T:Moth.Tasks.ITaskMetadata`1"/> instances.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskMetadataProvider.#ctor(Moth.IO.Serialization.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskMetadataProvider"/> class.
            </summary>
            <param name="formatProvider"><see cref="T:Moth.IO.Serialization.IFormatProvider"/> for serializing task data.</param>
        </member>
        <member name="M:Moth.Tasks.TaskMetadataProvider.Create``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.TaskMetadata`3">
            <summary>
            Represents a task that takes an argument and returns a result.
            </summary>
            <typeparam name="TTask">Type of the task.</typeparam>
            <typeparam name="TArg">Type of the argument.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`3.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskMetadata`3"/> class.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})"/>
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`3.IsDisposable">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`3.HasArgs">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`3.HasResult">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`3.Run(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <summary>
            Runs the task with <see langword="default"/> as argument and discards the result.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`3.Run(Moth.Tasks.TaskQueue.TaskDataAccess,`1)">
            <summary>
            Runs the task with an argument and discards the result.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`3.Moth#Tasks#IRunnableTaskMetadata{TArg,TResult}#Run(Moth.Tasks.TaskQueue.TaskDataAccess,`1)">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.TaskMetadata`2">
            <summary>
            Represents a task that takes an argument and returns no result.
            </summary>
            <typeparam name="TTask">Type of the task.</typeparam>
            <typeparam name="TArg">Type of the argument.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`2.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskMetadata`2"/> class.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})"/>
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`2.IsDisposable">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`2.HasArgs">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`2.HasResult">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`2.Run(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <summary>
            Runs the task with <see langword="default"/> as argument.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`2.Run(Moth.Tasks.TaskQueue.TaskDataAccess,`1)">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.TaskMetadata`1">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskMetadata`1"/> class.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskMetadataBase`1.#ctor(System.Int32,Moth.IO.Serialization.IFormat{`0})"/>
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`1.IsDisposable">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`1.HasArgs">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.TaskMetadata`1.HasResult">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskMetadata`1.Run(Moth.Tasks.TaskQueue.TaskDataAccess)">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.TaskQueue">
            <summary>
            Represents a queue of tasks to be run.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskQueue"/> class.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.#ctor(System.Int32,System.Int32,System.Int32,Moth.Tasks.ITaskMetadataCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskQueue"/> class.
            </summary>
            <param name="taskCapacity">Starting capacity for the internal task queue in no. of tasks.</param>
            <param name="unmanagedDataCapacity">Starting capacity for the internal task data array in bytes.</param>
            <param name="managedReferenceCapacity">Starting capacity for the internal task reference field store in no. of references.</param>
            <param name="taskCache">Optional <see cref="T:Moth.Tasks.ITaskMetadataCache"/> for caching task types.</param>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.#ctor(System.Int32,Moth.Tasks.ITaskMetadataCache,Moth.Tasks.ITaskDataStore,Moth.Tasks.ITaskHandleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskQueue"/> class.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskQueue.#ctor(System.Int32,System.Int32,System.Int32,Moth.Tasks.ITaskMetadataCache)"/>/>
            <param name="taskCapacity"></param>
            <param name="taskCache"></param>
            <param name="taskDataStore"><see cref="T:Moth.Tasks.ITaskDataStore"/> responsible for storing task data.</param>
            <param name="taskHandleManager"><see cref="T:Moth.Tasks.ITaskHandleManager"/> responsible for managing task handles.</param>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Moth.Tasks.TaskQueue"/> class. Also disposes of any enqueued tasks implementing <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskQueue.Count">
            <summary>
            The number of tasks currently enqueued.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``1(``0@)">
            <inheritdoc />
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)">
            <inheritdoc />
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.RunNextTask(Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue.RunNextTask(System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TryRunNextTask(System.Exception@,Moth.Tasks.IProfiler)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Clear(System.Action{System.Exception})">
            <summary>
            Removes all pending tasks from the queue. Also calls <see cref="M:System.IDisposable.Dispose"/> on tasks which implement the method.
            </summary>
            <param name="exceptionHandler">Method for handling an exception thrown by a task's <see cref="M:System.IDisposable.Dispose"/>.</param>
            <remarks>
            As the method iterates through all tasks in the queue and calls <see cref="M:System.IDisposable.Dispose"/> on tasks, it can hang for an unknown amount of time. If an exception is thrown in an <see cref="M:System.IDisposable.Dispose"/> call, the method continues on with disposing the remaining tasks.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Dispose">
            <summary>
            Disposes all tasks which implements <see cref="T:System.IDisposable"/>.
            </summary>
            <remarks>
            As the method iterates through all tasks in the queue and calls <see cref="M:System.IDisposable.Dispose"/> on tasks, it can hang for an unknown amount of time. If an exception is thrown in an <see cref="M:System.IDisposable.Dispose"/> call, the method continues on with disposing the remaining tasks.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Dispose(System.Boolean)">
            <summary>
            Disposes all tasks which implements <see cref="T:System.IDisposable"/>.
            </summary>
            <remarks>
            As the method iterates through all tasks in the queue and calls <see cref="M:System.IDisposable.Dispose"/> on tasks, it can hang for an unknown amount of time. If an exception is thrown in an <see cref="M:System.IDisposable.Dispose"/> call, the method continues on with disposing the remaining tasks.
            </remarks>
            <param name="disposing"><see langword="true"/> if called from <see cref="M:Moth.Tasks.TaskQueue.Dispose"/>, <see langword="false"/> if called from finalizer.</param>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.CreateTaskHandle">
            <summary>
            Creates a new <see cref="T:Moth.Tasks.TaskHandle"/>.
            </summary>
            <returns>A new unique <see cref="T:Moth.Tasks.TaskHandle"/>.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.EnqueueTask``1(``0@)">
            <summary>
            Enqueue an <see cref="T:Moth.Tasks.ITask"/> to be run later.
            </summary>
            <typeparam name="T">Type of task to run.</typeparam>
            <param name="task">Task data.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.RunNextTask``1(``0@,System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <summary>
            Runs the next task in the queue using a wrapper for running the task.
            </summary>
            <typeparam name="TTaskRunWrapper">Type of task run wrapper.</typeparam>
            <inheritdoc cref="M:Moth.Tasks.TaskQueue.RunNextTask(System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>
            <param name="taskRunWrapper">Wrapper to run the task in.</param>
            <param name="exception"/>
            <param name="profiler"/>
            <param name="token"/>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TryRunNextTask``1(``0@,System.Exception@,Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue using a wrapper for running the task.
            </summary>
            <inheritdoc cref="M:Moth.Tasks.TaskQueue.TryRunNextTask(System.Exception@,Moth.Tasks.IProfiler)"/>
            <inheritdoc cref="M:Moth.Tasks.TaskQueue.RunNextTask``1(``0@,System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)"/>
            <param name="taskRunWrapper"/>
            <param name="exception"/>
            <param name="profiler"/>
        </member>
        <member name="T:Moth.Tasks.TaskQueue.TaskDataAccess">
            <summary>
            Provides a way for a task to access its data while locking the <see cref="T:Moth.Tasks.TaskQueue"/>.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TaskDataAccess.#ctor(Moth.Tasks.TaskQueue,System.Boolean*,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskQueue.TaskDataAccess"/> struct. Locks the <see cref="T:Moth.Tasks.TaskQueue"/>.
            </summary>
            <param name="queue">Reference to the queue.</param>
            <param name="disposed">Pointer to the disposed flag.</param>
            <param name="disposeOnGetNextTaskData">Whether to dispose the lock after getting the next task data.</param>
        </member>
        <member name="P:Moth.Tasks.TaskQueue.TaskDataAccess.Disposed">
            <summary>
            Gets a value indicating whether the lock is still held.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TaskDataAccess.GetNextTaskData``1(Moth.Tasks.ITaskMetadata{``0})">
            <summary>
            Fetches next data of a task.
            </summary>
            <typeparam name="TTask">Type of task.</typeparam>
            <param name="taskInfo">TaskMetadata of task.</param>
            <returns>Task data.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TaskDataAccess.Dispose">
            <summary>
            Exits the lock.
            </summary>
        </member>
        <member name="T:Moth.Tasks.TaskQueue.TaskRunWrapperArgs">
            <summary>
            Wrapper for running a task.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TaskRunWrapperArgs.#ctor(Moth.Tasks.ITaskMetadata,Moth.Tasks.TaskQueue.TaskDataAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskQueue.TaskRunWrapperArgs"/> struct.
            </summary>
            <param name="task">Metadata of task.</param>
            <param name="access">Access to task data.</param>
        </member>
        <member name="P:Moth.Tasks.TaskQueue.TaskRunWrapperArgs.Access">
            <summary>
            Gets the access to task data.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TaskRunWrapperArgs.GetTaskMetadataRunnable``1">
            <summary>
            Gets the task metadata as a runnable task.
            </summary>
            <typeparam name="T">Type of task metadata.</typeparam>
            <returns>A task metadata instance for running the task.</returns>
        </member>
        <member name="T:Moth.Tasks.TaskQueue`2">
            <summary>
            Represents a queue of tasks to be run with an argument and return a result.
            </summary>
            <typeparam name="TArg">Type of argument to pass to the tasks.</typeparam>
            <typeparam name="TResult">Type of the task results.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskQueue`2.Enqueue``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`2.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`2.RunNextTask(`0,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`2.RunNextTask(`0,System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`2.TryRunNextTask(`0,`1@,Moth.Tasks.IProfiler)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`2.TryRunNextTask(`0,`1@,System.Exception@,Moth.Tasks.IProfiler)">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.TaskQueue`1">
            <summary>
            Represents a queue of tasks to be run with an argument.
            </summary>
            <typeparam name="TArg">Type of argument to pass to the tasks.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskQueue`1.Enqueue``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`1.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`1.RunNextTask(`0,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`1.RunNextTask(`0,System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`1.TryRunNextTask(`0,Moth.Tasks.IProfiler)">
            <inheritdoc />
        </member>
        <member name="M:Moth.Tasks.TaskQueue`1.TryRunNextTask(`0,System.Exception@,Moth.Tasks.IProfiler)">
            <inheritdoc />
        </member>
        <member name="T:Moth.Tasks.TaskReferenceInsertContext">
            <summary>
            Represents a context for inserting references into an <see cref="T:Moth.Tasks.ITaskReferenceStore"/>.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskReferenceInsertContext.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskReferenceInsertContext"/> struct.
            </summary>
            <param name="onDisposeAction"><see cref="T:System.Action"/> to call on <see cref="M:Moth.Tasks.TaskReferenceInsertContext.Dispose"/>.</param>
        </member>
        <member name="M:Moth.Tasks.TaskReferenceInsertContext.Dispose">
            <summary>
            Disposes the insert context.
            </summary>
        </member>
        <member name="T:Moth.Tasks.TaskReferenceStore">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskReferenceStore.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskReferenceStore"/> class.
            </summary>
            <param name="startCapacity">The starting capacity of the store.</param>
        </member>
        <member name="P:Moth.Tasks.TaskReferenceStore.Start">
            <inheritdoc/>
        </member>
        <member name="P:Moth.Tasks.TaskReferenceStore.End">
            <inheritdoc/>
        </member>
        <member name="P:Moth.Tasks.TaskReferenceStore.Count">
            <inheritdoc/>
        </member>
        <member name="P:Moth.Tasks.TaskReferenceStore.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Moth.Tasks.TaskReferenceStore.Write">
            <inheritdoc/>
        </member>
        <member name="P:Moth.Tasks.TaskReferenceStore.Read">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskReferenceStore.EnterInsertContext(System.Int32@,System.Int32,Moth.IO.Serialization.ObjectWriter@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="insertIndex"/> is not within the range of stored references.</exception>"
        </member>
        <member name="M:Moth.Tasks.TaskReferenceStore.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskReferenceStore.Skip(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Moth.Tasks.TaskWithHandle`3">
            <summary>
            Encapsulates a task enqueued with a <see cref="T:Moth.Tasks.TaskHandle"/>.
            </summary>
            <typeparam name="TTask">Type of task.</typeparam>
            <typeparam name="TArg">Type of task argument.</typeparam>
            <typeparam name="TResult">Type of task result.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskWithHandle`3.#ctor(`0@,Moth.Tasks.TaskHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskWithHandle`3"/> struct.
            </summary>
            <param name="task">Task data.</param>
            <param name="handle">Task handle.</param>
        </member>
        <member name="M:Moth.Tasks.TaskWithHandle`3.Run(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskWithHandle`3.Dispose">
            <summary>
            Notify handle that task was completed.
            </summary>
        </member>
        <member name="T:Moth.Tasks.TaskWrapper`3">
            <summary>
            Wraps an <see cref="T:Moth.Tasks.ITask`2"/> as an <see cref="T:Moth.Tasks.ITask"/>, taking no arguments and returning no result.
            </summary>
            <typeparam name="TTask">Task type to wrap.</typeparam>
            <typeparam name="TArg">Argument of task.</typeparam>
            <typeparam name="TResult">Result of task.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskWrapper`3.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskWrapper`3"/> struct.
            </summary>
            <param name="task">Task to wrap.</param>
        </member>
        <member name="M:Moth.Tasks.TaskWrapper`3.Run">
            <summary>
            Run the wrapped task with <see langword="default"/> as argument and then discarding result.
            </summary>
        </member>
        <member name="T:Moth.Tasks.TaskWrapper`2">
            <summary>
            Wraps an <see cref="T:Moth.Tasks.ITask`1"/> as an <see cref="T:Moth.Tasks.ITask`2"/>, returning an instance of <see cref="T:Moth.Tasks.Unit"/>.
            </summary>
            <typeparam name="TTask">Task type to wrap.</typeparam>
            <typeparam name="TArg">Argument of task.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskWrapper`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskWrapper`2"/> struct.
            </summary>
            <param name="task">Task to wrap.</param>
        </member>
        <member name="M:Moth.Tasks.TaskWrapper`2.Run(`1)">
            <summary>
            Run the wrapped task with the specified argument.
            </summary>
            <param name="arg">Value to pass as argument.</param>
            <returns>An instance of <see cref="T:Moth.Tasks.Unit"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.TaskWrapper`1">
            <summary>
            Wraps an <see cref="T:Moth.Tasks.ITask"/> as an <see cref="T:Moth.Tasks.ITask`2"/>, taking a <see cref="T:Moth.Tasks.Unit"/> as argument and returning an instance of <see cref="T:Moth.Tasks.Unit"/>.
            </summary>
            <typeparam name="TTask">Task type to wrap.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskWrapper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskWrapper`1"/> struct.
            </summary>
            <param name="task">Task to wrap.</param>
        </member>
        <member name="M:Moth.Tasks.TaskWrapper`1.Run(Moth.Tasks.Unit)">
            <summary>
            Run the wrapped task.
            </summary>
            <param name="arg">Argument is ignored.</param>
            <returns>An instance of <see cref="T:Moth.Tasks.Unit"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.Unit">
            <summary>
            Represents a unit type. This type is used to represent the absence of a value.
            </summary>
        </member>
        <member name="M:Moth.Tasks.Unit.Equals(Moth.Tasks.Unit)">
            <summary>
            Compares this instance of <see cref="T:Moth.Tasks.Unit"/> with another instance.
            </summary>
            <param name="other">Other instance of <see cref="T:Moth.Tasks.Unit"/>.</param>
            <returns>Always returns <see langword="true"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.Worker">
            <summary>
            Runs on an <see cref="T:Moth.Tasks.IWorkerThread"/> continuously executing tasks from a <see cref="T:Moth.Tasks.TaskQueue"/>.
            </summary>
        </member>
        <member name="M:Moth.Tasks.Worker.#ctor(Moth.Tasks.ITaskQueue,System.Boolean,Moth.Tasks.WorkerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.Worker"/> class.
            </summary>
            <remarks>
            The <see cref="T:Moth.Tasks.Worker"/> will start executing tasks automatically.
            </remarks>
            <param name="taskQueue">The <see cref="T:Moth.Tasks.TaskQueue"/> of which the worker will be executing tasks from.</param>
            <param name="shouldDisposeTaskQueue">Determines whether the <see cref="T:Moth.Tasks.TaskQueue"/> supplied with <paramref name="taskQueue"/> is disposed when <see cref="M:Moth.Tasks.Worker.Dispose"/> is called.</param>
            <param name="options">Options for initializing the <see cref="T:Moth.Tasks.Worker"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taskQueue"/> cannot be null.</exception>
        </member>
        <member name="M:Moth.Tasks.Worker.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Moth.Tasks.Worker"/> class.
            </summary>
        </member>
        <member name="P:Moth.Tasks.Worker.IsRunning">
            <summary>
            Gets a value indicating whether the thread is running.
            </summary>
        </member>
        <member name="P:Moth.Tasks.Worker.IsStarted">
            <inheritdoc />
        </member>
        <member name="P:Moth.Tasks.Worker.Tasks">
            <summary>
            Gets the <see cref="T:Moth.Tasks.TaskQueue"/> of which the worker is executing tasks from.
            </summary>
        </member>
        <member name="P:Moth.Tasks.Worker.CancellationToken">
            <summary>
            Gets the <see cref="T:System.Threading.CancellationToken"/> associated with this worker.
            </summary>
            <remarks>
            Can be passed to a task enqueued on <see cref="P:Moth.Tasks.Worker.Tasks"/>, allowing it to exit early if <see cref="M:Moth.Tasks.Worker.Dispose"/> is called.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.Worker.Start">
            <summary>
            Manually starts the worker if <see cref="P:Moth.Tasks.WorkerOptions.RequiresManualStart"/> was set to <see langword="true"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.Worker"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The worker is already started.</exception>
        </member>
        <member name="M:Moth.Tasks.Worker.DisposeAndJoin">
            <summary>
            Calls <see cref="M:Moth.Tasks.Worker.Dispose"/> and blocks the calling thread until the <see cref="T:Moth.Tasks.Worker"/> terminates.
            </summary>
        </member>
        <member name="M:Moth.Tasks.Worker.Join">
            <summary>
            Blocks the calling thread until the <see cref="T:Moth.Tasks.Worker"/> terminates.
            </summary>
            <remarks>
            <see cref="M:Moth.Tasks.Worker.Dispose"/> must be called beforehand. If <see cref="M:Moth.Tasks.Worker.Start"/> was never called, this method will return immediately.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Moth.Tasks.Worker"/> is not disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.Worker.Dispose">
            <summary>
            Sends a signal to shutdown the thread. Also disposes of <see cref="P:Moth.Tasks.Worker.Tasks"/> if specified in <see cref="T:Moth.Tasks.Worker"/> constructor.
            </summary>
        </member>
        <member name="M:Moth.Tasks.Worker.Dispose(System.Boolean)">
            <summary>
            Sends a signal to shutdown the thread. Also disposes of <see cref="P:Moth.Tasks.Worker.Tasks"/> if specified in <see cref="T:Moth.Tasks.Worker"/> constructor.
            </summary>
            <param name="disposing"><see langword="true"/> if called from <see cref="M:Moth.Tasks.Worker.Dispose"/>, <see langword="false"/> if called from finalizer.</param>
        </member>
        <member name="T:Moth.Tasks.WorkerGroup">
            <summary>
            A group of <see cref="T:Moth.Tasks.IWorker"/>s, executing tasks from a shared <see cref="T:Moth.Tasks.TaskQueue"/>.
            </summary>
            <remarks>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.#ctor(System.Int32,Moth.Tasks.ITaskQueue,System.Boolean,Moth.Tasks.WorkerProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.WorkerGroup"/> class.
            </summary>
            <param name="workerCount">Number of workers. Must be greater than zero.</param>
            <param name="taskQueue">The <see cref="T:Moth.Tasks.TaskQueue"/> of which the workers will be executing tasks from.</param>
            <param name="disposeTaskQueue">Determines whether the <see cref="T:Moth.Tasks.TaskQueue"/> supplied with <paramref name="taskQueue"/> is disposed when <see cref="M:Moth.Tasks.WorkerGroup.Dispose"/> is called.</param>
            <param name="workerProvider">A method that provides an <see cref="T:Moth.Tasks.IWorker"/> for a <see cref="T:Moth.Tasks.WorkerGroup"/>. If <see langword="null"/>, <see cref="M:Moth.Tasks.WorkerGroup.DefaultWorkerProvider(Moth.Tasks.WorkerGroup,System.Int32)"/> is used.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workerCount"/> must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="taskQueue"/> cannot be null.</exception>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Moth.Tasks.WorkerGroup"/> class.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerGroup.Tasks">
            <summary>
            The <see cref="T:Moth.Tasks.TaskQueue"/> of which the workers are executing tasks from.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerGroup.WorkerCount">
            <summary>
            Get or set the number of <see cref="T:Moth.Tasks.IWorker"/>s in this <see cref="T:Moth.Tasks.WorkerGroup"/>. Must be greater than zero.
            </summary>
            <remarks>
            The <see cref="T:Moth.Tasks.ProfilerProvider"/> and <see cref="T:System.EventHandler`1"/> provided in the <see cref="T:Moth.Tasks.WorkerGroup"/> constructor will be used to initialize any new <see cref="T:Moth.Tasks.IWorker"/>s.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.DefaultWorkerProvider(Moth.Tasks.WorkerGroup,System.Int32)">
            <summary>
            Provides a <see cref="T:Moth.Tasks.IWorker"/> with default <see cref="T:Moth.Tasks.WorkerOptions"/> for a <see cref="T:Moth.Tasks.WorkerGroup"/>.
            </summary>
            <param name="workerGroup">The <see cref="T:Moth.Tasks.WorkerGroup"/> the <see cref="T:Moth.Tasks.IWorker"/> will belong to.</param>
            <param name="workerIndex">The index of the <see cref="T:Moth.Tasks.IWorker"/> in the <see cref="T:Moth.Tasks.WorkerGroup"/>.</param>
            <returns>A new <see cref="T:Moth.Tasks.IWorker"/> with default <see cref="T:Moth.Tasks.WorkerOptions"/>.</returns>
            <remarks>Should not be called directly, but may be passed to <see cref="M:Moth.Tasks.WorkerGroup.#ctor(System.Int32,Moth.Tasks.ITaskQueue,System.Boolean,Moth.Tasks.WorkerProvider)"/> constructor as a <see cref="T:Moth.Tasks.WorkerProvider"/>.</remarks>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.DisposeAndJoin">
            <summary>
            Calls <see cref="M:Moth.Tasks.WorkerGroup.Dispose"/> and blocks the calling thread until all <see cref="T:Moth.Tasks.IWorker"/>s terminate.
            </summary>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.Join">
            <summary>
            Blocks the calling thread until all <see cref="T:Moth.Tasks.IWorker"/>s terminate.
            </summary>
            <remarks>
            <see cref="M:Moth.Tasks.WorkerGroup.Dispose"/> must be called beforehand.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Moth.Tasks.WorkerGroup"/> is not disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.Dispose">
            <summary>
            Signals all workers to shutdown. Also disposes of <see cref="P:Moth.Tasks.WorkerGroup.Tasks"/> if specified in <see cref="T:Moth.Tasks.WorkerGroup"/> constructor.
            </summary>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.Dispose(System.Boolean)">
            <summary>
            Signals all workers to shutdown. Also disposes of <see cref="P:Moth.Tasks.WorkerGroup.Tasks"/> if specified in <see cref="T:Moth.Tasks.WorkerGroup"/> constructor.
            </summary>
            <param name="disposing"><see langword="true"/> if called from <see cref="M:Moth.Tasks.WorkerGroup.Dispose"/>, <see langword="false"/> if called from finalizer.</param>
        </member>
        <member name="T:Moth.Tasks.WorkerOptions">
            <summary>
            Represents options for a worker.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerOptions.Profiler">
            <summary>
            Gets or sets the <see cref="T:Moth.Tasks.IProfiler"/> to use.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerOptions.ProfilerProvider">
            <summary>
            Gets or sets the <see cref="P:Moth.Tasks.WorkerOptions.ProfilerProvider"/> to use.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerOptions.WorkerThread">
            <summary>
            Gets or sets the <see cref="T:Moth.Tasks.IWorkerThread"/> to use.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerOptions.WorkerThreadProvider">
            <summary>
            Gets or sets the <see cref="P:Moth.Tasks.WorkerOptions.WorkerThreadProvider"/> to use.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerOptions.ExceptionEventHandler">
            <summary>
            Gets or sets the <see cref="T:System.EventHandler`1"/> to use.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerOptions.RequiresManualStart">
            <summary>
            Gets or sets a value indicating whether the worker will require <see cref="M:Moth.Tasks.IWorker.Start"/> to be called manually.
            </summary>
        </member>
        <member name="T:Moth.Tasks.WorkerProvider">
            <summary>
            Represents a method that provides a new <see cref="T:Moth.Tasks.IWorker"/> for a <see cref="T:Moth.Tasks.WorkerGroup"/>, given an index of the worker in the group.
            </summary>
            <param name="workerGroup">The <see cref="T:Moth.Tasks.WorkerGroup"/> the <see cref="T:Moth.Tasks.IWorker"/> will belong to.</param>
            <param name="workerIndex">The index of the <see cref="T:Moth.Tasks.IWorker"/> in the <see cref="T:Moth.Tasks.WorkerGroup"/>.</param>
            <returns>A new <see cref="T:Moth.Tasks.IWorker"/>.</returns>
            <remarks>This method should create a new unique <see cref="T:Moth.Tasks.IWorker"/> for each call. The method may be called multiple times with the same parameters if the <see cref="T:Moth.Tasks.WorkerGroup"/> was resized.</remarks>
        </member>
        <member name="T:Moth.Tasks.WorkerThread">
            <summary>
            Wraps a <see cref="T:System.Threading.Thread"/> as a worker thread.
            </summary>
        </member>
        <member name="M:Moth.Tasks.WorkerThread.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.WorkerThread"/> class.
            </summary>
            <param name="isBackground"><see langword="true"/> if the thread should run in the background.</param>
        </member>
        <member name="P:Moth.Tasks.WorkerThread.IsBackground">
            <summary>
            Gets or sets a value indicating whether the thread is a background thread.
            </summary>
        </member>
        <member name="M:Moth.Tasks.WorkerThread.Start(System.Threading.ThreadStart)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Thread is already started.</exception>"
        </member>
        <member name="M:Moth.Tasks.WorkerThread.Join">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Thread is not started.</exception>""
        </member>
        <member name="T:Moth.Tasks.WorkerThreadProvider">
            <summary>
            Represents a method that provides an <see cref="T:Moth.Tasks.IWorkerThread"/> for an <see cref="T:Moth.Tasks.IWorker"/>.
            </summary>
            <param name="worker">The <see cref="T:Moth.Tasks.IWorker"/> to provide for.</param>
            <returns>A new <see cref="T:Moth.Tasks.IWorkerThread"/>.</returns>
            <remarks>This method should create a new unique <see cref="T:Moth.Tasks.IWorkerThread"/> for each call, which must not have been started beforehand.</remarks>
        </member>
    </members>
</doc>
