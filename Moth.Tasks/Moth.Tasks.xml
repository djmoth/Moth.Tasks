<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Moth.Tasks</name>
    </assembly>
    <members>
        <member name="T:Moth.Tasks.DelegateTask">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with no parameters.
            </summary>
        </member>
        <member name="M:Moth.Tasks.DelegateTask.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask.Run"/>.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action"/>.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`1">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 1 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`1.#ctor(System.Action{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`1"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`1"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`1.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`1.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`1"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`2">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 2 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`2.#ctor(System.Action{`0,`1},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`2"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`2"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`2.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`2.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`2"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`3">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 3 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`3.#ctor(System.Action{`0,`1,`2},`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`3"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`3"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`3.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`3.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`3"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`4">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 4 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`4.#ctor(System.Action{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`4"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`4"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`4.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`4.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`4"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`5">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 5 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`5.#ctor(System.Action{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`5"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`5"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`5.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`5.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`5"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`6">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 6 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`6.#ctor(System.Action{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`6"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`6"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`6.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`6.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`6"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`7">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 7 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`7.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6},`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`7"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`7"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`7.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`7.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`7"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`8">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 8 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`8.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7},`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`8"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`8"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`8.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`8.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`8"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`9">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 9 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`9.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8},`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`9"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`9"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`9.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`9.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`9"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`10">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 10 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`10.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`10"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`10"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`10.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`10.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`10"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`11">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 11 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`11.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`11"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`11"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`11.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`11.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`11"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`12">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 12 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`12.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`12"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`12"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`12.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`12.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`12"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`13">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 13 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`13.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`13"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`13"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`13.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`13.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`13"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`14">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 14 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`14.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`14"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`14"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`14.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`14.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`14"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`15">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 15 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
            <typeparam name="T15">Type of parameter 15.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`15.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`15"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`15"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`15.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
            <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`15.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`15"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DelegateTask`16">
            <summary>
            Task encapsulating an <see cref="T:System.Action"/> with 16 parameters.
            </summary>
            <typeparam name="T1">Type of parameter 1.</typeparam>
            <typeparam name="T2">Type of parameter 2.</typeparam>
            <typeparam name="T3">Type of parameter 3.</typeparam>
            <typeparam name="T4">Type of parameter 4.</typeparam>
            <typeparam name="T5">Type of parameter 5.</typeparam>
            <typeparam name="T6">Type of parameter 6.</typeparam>
            <typeparam name="T7">Type of parameter 7.</typeparam>
            <typeparam name="T8">Type of parameter 8.</typeparam>
            <typeparam name="T9">Type of parameter 9.</typeparam>
            <typeparam name="T10">Type of parameter 10.</typeparam>
            <typeparam name="T11">Type of parameter 11.</typeparam>
            <typeparam name="T12">Type of parameter 12.</typeparam>
            <typeparam name="T13">Type of parameter 13.</typeparam>
            <typeparam name="T14">Type of parameter 14.</typeparam>
            <typeparam name="T15">Type of parameter 15.</typeparam>
            <typeparam name="T16">Type of parameter 16.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`16.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DelegateTask`16"/> struct.
            </summary>
            <param name="action"><see cref="T:System.Action`16"/> to invoke on <see cref="M:Moth.Tasks.DelegateTask`16.Run"/>.</param>
            <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
            <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
            <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
            <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
            <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
            <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
            <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
            <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
            <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
            <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
            <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
            <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
            <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
            <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
            <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
            <param name="arg16">Argument 16 to invoke <paramref name="action"/> with.</param>
        </member>
        <member name="M:Moth.Tasks.DelegateTask`16.Run">
            <summary>
            Invokes the encapsulated <see cref="T:System.Action`16"/> with the provided argument.
            </summary>
        </member>
        <member name="T:Moth.Tasks.IProfiler">
            <summary>
            Describes a profiler which can measure the run time of a task.
            </summary>
        </member>
        <member name="M:Moth.Tasks.IProfiler.BeginTask(System.String)">
            <summary>
            Signals the beginning of a new task.
            </summary>
            <param name="task">Name of task type.</param>
        </member>
        <member name="M:Moth.Tasks.IProfiler.EndTask">
            <summary>
            Signals the completion of a task.
            </summary>
        </member>
        <member name="T:Moth.Tasks.ITask">
            <summary>
            Interface providing a <see cref="M:Moth.Tasks.ITask.Run"/> method for executing task code.
            </summary>
        </member>
        <member name="M:Moth.Tasks.ITask.Run">
            <summary>
            Task code to run.
            </summary>
        </member>
        <member name="T:Moth.Tasks.ProfilerProvider">
            <summary>
            Represents a method that provides an <see cref="T:Moth.Tasks.IProfiler"/> for a <see cref="T:Moth.Tasks.Worker"/>, or <see langword="null"/> if profiling is not desired.
            </summary>
            <param name="worker">The <see cref="T:Moth.Tasks.Worker"/>.</param>
            <returns>An <see cref="T:Moth.Tasks.IProfiler"/> for the <paramref name="worker"/>, or <see langword="null"/> if profiling is not desired.</returns>
            <remarks>
            The method does not have to provide a unique <see cref="T:Moth.Tasks.IProfiler"/> for each <see cref="T:Moth.Tasks.Worker"/>, yet in that case it must be able to differentiate between <see cref="T:Moth.Tasks.Worker"/>s on its own, so as their calls to <see cref="M:Moth.Tasks.IProfiler.BeginTask(System.String)"/> and <see cref="M:Moth.Tasks.IProfiler.EndTask"/> don't interfere.
            </remarks>
        </member>
        <member name="T:Moth.Tasks.TaskCache">
            <summary>
            Cache of <see cref="T:Moth.Tasks.TaskInfo"/>.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskCache.GetTask``1">
            <summary>
            Get a task by type.
            </summary>
            <typeparam name="T">Type of task.</typeparam>
            <returns><see cref="T:Moth.Tasks.TaskInfo"/> for <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskCache.GetTask(System.Int32)">
            <summary>
            Get task by id.
            </summary>
            <param name="id">Assigned id of task.</param>
            <returns><see cref="T:Moth.Tasks.TaskInfo"/> for <paramref name="id"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.TaskExceptionEventArgs">
            <summary>
            Contains information about an exception that was thrown in a task.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskExceptionEventArgs"/> class.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> thrown.</param>
        </member>
        <member name="P:Moth.Tasks.TaskExceptionEventArgs.Exception">
            <summary>
            <see cref="T:System.Exception"/> thrown.
            </summary>
        </member>
        <member name="T:Moth.Tasks.TaskHandle">
            <summary>
            Handle for checking task status.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskHandle.#ctor(Moth.Tasks.TaskQueue,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskHandle"/> struct.
            </summary>
            <param name="queue">Reference to queue that the task belongs to.</param>
            <param name="handleID">ID of handle.</param>
        </member>
        <member name="P:Moth.Tasks.TaskHandle.IsComplete">
            <summary>
            Checks if the task has been completed.
            </summary>
            <remarks>
            Please note that this property does not indicate whether the task executed successfully or not.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.TaskHandle.WaitForCompletion">
            <summary>
            Waits indefinitely until the task has been completed.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskHandle.WaitForCompletion(System.Int32)">
            <summary>
            Waits for a maximum time in milliseconds for the task to complete.
            </summary>
            <param name="millisceondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns><see langword="true"/> if the task was completed before timeout; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.TaskInfo">
            <summary>
            Representation of a task in a <see cref="T:Moth.Tasks.TaskCache"/>.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskInfo.ID">
            <summary>
            ID of task.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskInfo.Type">
            <summary>
            Type of task.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskInfo.DataSize">
            <summary>
            Size of task data in bytes.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskInfo.DataIndices">
            <summary>
            Size of task in indices of <see cref="F:Moth.Tasks.TaskQueue.taskData"/>.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskInfo.Disposable">
            <summary>
            Gets a value indicating whether the task type implements <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskInfo.Create``1(System.Int32)">
            <summary>
            Creates a new TaskInfo from a type and ID.
            </summary>
            <typeparam name="T">Type of task.</typeparam>
            <param name="id">ID of task.</param>
            <returns>A new TaskInfo representing the task <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskInfo.GetDataIndexSize(System.Int32)">
            <summary>
            Calculates how many indices of <see cref="F:Moth.Tasks.TaskQueue.taskData"/> it will take to store a struct of <paramref name="dataSize"/> bytes.
            </summary>
            <param name="dataSize">Raw size of struct.</param>
            <returns>Number of indices.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskInfo.RunAndDispose(Moth.Tasks.TaskQueue.TaskDataAccess@)">
            <summary>
            Call the <see cref="M:Moth.Tasks.ITask.Run"/> method of the task, with <see cref="T:Moth.Tasks.TaskQueue.TaskDataAccess"/> for getting task data. Also calls <see cref="M:System.IDisposable.Dispose"/>, if implemented.
            </summary>
            <param name="access">Access to data from <see cref="T:Moth.Tasks.TaskQueue"/>.</param>
        </member>
        <member name="M:Moth.Tasks.TaskInfo.Dispose(Moth.Tasks.TaskQueue.TaskDataAccess@)">
            <summary>
            Call the <see cref="M:System.IDisposable.Dispose"/> method of the task, with <see cref="T:Moth.Tasks.TaskQueue.TaskDataAccess"/> for getting task data.
            </summary>
            <param name="access">Access to data from <see cref="T:Moth.Tasks.TaskQueue"/>.</param>
        </member>
        <member name="T:Moth.Tasks.TaskQueue">
            <summary>
            A queue of tasks, which can be run in FIFO order.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskQueue"/> class.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskQueue"/> class.
            </summary>
            <param name="taskCapacity">Starting capacity for the internal task queue.</param>
            <param name="dataCapacity">Starting capacity for the internal task data array.</param>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Moth.Tasks.TaskQueue"/> class. Also disposes of tasks implementing <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="P:Moth.Tasks.TaskQueue.Count">
            <summary>
            The number of tasks currently enqueued.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``1(``0@)">
            <summary>
            Enqueue an <see cref="T:Moth.Tasks.ITask"/> to be run later.
            </summary>
            <typeparam name="T">Type of task to run.</typeparam>
            <param name="task">Task data.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``1(``0@,Moth.Tasks.TaskHandle@)">
            <summary>
            Enqueue an <see cref="T:Moth.Tasks.ITask"/> to be run later, giving out a <see cref="T:Moth.Tasks.TaskHandle"/> for checking task status.
            </summary>
            <typeparam name="T">Type of task to run.</typeparam>
            <param name="task">Task data.</param>
            <param name="handle">Handle for checking task status.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.RunNextTask(Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <summary>
            Blocks until a task is ready in the queue, then runs it.
            </summary>
            <param name="profiler"><see cref="T:Moth.Tasks.IProfiler"/> to profile the run-time of the task.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> to observe when waiting for a task. Does not cancel actual task execution.</param>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.RunNextTask(System.Exception@,Moth.Tasks.IProfiler,System.Threading.CancellationToken)">
            <summary>
            Blocks until a task is ready in the queue, then runs it.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> thrown if task failed. Is <see langword="null"/> if task was run successfully.</param>
            <param name="profiler"><see cref="T:Moth.Tasks.IProfiler"/> to profile the run-time of the task.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> to observe when waiting for a task. Does not cancel actual task execution.</param>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TryRunNextTask(Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue, if present. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <param name="profiler"><see cref="T:Moth.Tasks.IProfiler"/> to profile the run-time of the task.</param>
            <returns><see langword="true"/> if a task was run, <see langword="false"/> if the <see cref="T:Moth.Tasks.TaskQueue"/> is empty.</returns>
            <remarks>
            Please note that the return value does not indicate if a task was successful. The method will return <see langword="true"/> if a task was ready in the queue, regardless of whether an exception occured.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TryRunNextTask(System.Exception@,Moth.Tasks.IProfiler)">
            <summary>
            Tries to run the next task in the queue, if present. Provides an <see cref="T:System.Exception"/> thrown by the task, in case it fails. May also perform profiling on the task through an <see cref="T:Moth.Tasks.IProfiler"/>.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> thrown if task failed. Is <see langword="null"/> if task was run successfully.</param>
            <param name="profiler"><see cref="T:Moth.Tasks.IProfiler"/> to profile the run-time of the task.</param>
            <returns><see langword="true"/> if a task was run, <see langword="false"/> if the <see cref="T:Moth.Tasks.TaskQueue"/> is empty.</returns>
            <remarks>
            Please note that the return value does not indicate if a task was successful. The method will return <see langword="true"/> if a task was ready in the queue, regardless of whether an exception occured.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Clear(System.Action{System.Exception})">
            <summary>
            Removes all pending tasks from the queue. Also calls <see cref="M:System.IDisposable.Dispose"/> on tasks which implement the method.
            </summary>
            <param name="exceptionHandler">Method for handling an exception thrown by a task's <see cref="M:System.IDisposable.Dispose"/>.</param>
            <remarks>
            As the method iterates through all tasks in the queue and calls <see cref="M:System.IDisposable.Dispose"/> on tasks, it can hang for an unknown amount of time. If an exception is thrown in an <see cref="M:System.IDisposable.Dispose"/> call, the method continues on with disposing the remaining tasks.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Dispose">
            <summary>
            Disposes all tasks which implements <see cref="T:System.IDisposable"/>.
            </summary>
            <remarks>
            As the method iterates through all tasks in the queue and calls <see cref="M:System.IDisposable.Dispose"/> on tasks, it can hang for an unknown amount of time. If an exception is thrown in an <see cref="M:System.IDisposable.Dispose"/> call, the method continues on with disposing the remaining tasks.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Dispose(System.Boolean)">
            <summary>
            Disposes all tasks which implements <see cref="T:System.IDisposable"/>.
            </summary>
            <remarks>
            As the method iterates through all tasks in the queue and calls <see cref="M:System.IDisposable.Dispose"/> on tasks, it can hang for an unknown amount of time. If an exception is thrown in an <see cref="M:System.IDisposable.Dispose"/> call, the method continues on with disposing the remaining tasks.
            </remarks>
            <param name="disposing"><see langword="true"/> if called from <see cref="M:Moth.Tasks.TaskQueue.Dispose"/>, <see langword="false"/> if called from finalizer.</param>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.WaitForCompletion(System.Int32,System.Int32)">
            <summary>
            Used by <see cref="M:Moth.Tasks.TaskHandle.WaitForCompletion"/> to wait until task is complete.
            </summary>
            <param name="handleID">ID of handle.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns><see langword="true"/> if task was completed, <see langword="false"/> if timeout was reached.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.NotifyTaskComplete(System.Int32)">
            <summary>
            Used by <see cref="T:Moth.Tasks.TaskWithHandle`1"/> to notify callers of <see cref="M:Moth.Tasks.TaskQueue.WaitForCompletion(System.Int32,System.Int32)"/> that the task is done.
            </summary>
            <param name="handleID">ID of handle.</param>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.IsTaskComplete(System.Int32)">
            <summary>
            Check if a task has completed.
            </summary>
            <param name="handleID">ID of handle.</param>
            <returns><see langword="true"/> if task has completed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Moth.Tasks.TaskQueue.TaskDataAccess">
            <summary>
            Provides a way for a task to access its data while locking the <see cref="T:Moth.Tasks.TaskQueue"/>.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TaskDataAccess.#ctor(Moth.Tasks.TaskQueue)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskQueue.TaskDataAccess"/> struct. Locks the <see cref="T:Moth.Tasks.TaskQueue"/>.
            </summary>
            <param name="queue">Reference to the queue.</param>
        </member>
        <member name="P:Moth.Tasks.TaskQueue.TaskDataAccess.Disposed">
            <summary>
            Gets a value indicating whether the lock is still held.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TaskDataAccess.GetTaskData``1(Moth.Tasks.TaskInfo)">
            <summary>
            Fetches next data of a task.
            </summary>
            <typeparam name="T">Type of task.</typeparam>
            <param name="task">TaskInfo of task.</param>
            <returns>Task data.</returns>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.TaskDataAccess.Dispose">
            <summary>
            Exits the lock.
            </summary>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue(System.Action)">
            <summary>
            Enqueue an action to be run later.
            </summary>
            <param name="action">Action to enqueue.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``1(System.Action{``0},``0)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="M:Moth.Tasks.TaskQueue.Enqueue``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Enqueue an action to be run later with supplied arguments.
            </summary>
            <param name="action">Action to enqueue.</param>
            <param name="arg1">The 1st argument to run <paramref name="action"/> with.</param>
            <param name="arg2">The 2nd argument to run <paramref name="action"/> with.</param>
            <param name="arg3">The 3rd argument to run <paramref name="action"/> with.</param>
            <param name="arg4">The 4th argument to run <paramref name="action"/> with.</param>
            <param name="arg5">The 5th argument to run <paramref name="action"/> with.</param>
            <param name="arg6">The 6th argument to run <paramref name="action"/> with.</param>
            <param name="arg7">The 7th argument to run <paramref name="action"/> with.</param>
            <param name="arg8">The 8th argument to run <paramref name="action"/> with.</param>
            <param name="arg9">The 9th argument to run <paramref name="action"/> with.</param>
            <param name="arg10">The 10th argument to run <paramref name="action"/> with.</param>
            <param name="arg11">The 11th argument to run <paramref name="action"/> with.</param>
            <param name="arg12">The 12th argument to run <paramref name="action"/> with.</param>
            <param name="arg13">The 13th argument to run <paramref name="action"/> with.</param>
            <param name="arg14">The 14th argument to run <paramref name="action"/> with.</param>
            <param name="arg15">The 15th argument to run <paramref name="action"/> with.</param>
            <param name="arg16">The 16th argument to run <paramref name="action"/> with.</param>
            <typeparam name="T1">The type of the 1st parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T2">The type of the 2nd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T3">The type of the 3rd parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T4">The type of the 4th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T5">The type of the 5th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T6">The type of the 6th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T7">The type of the 7th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T8">The type of the 8th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T9">The type of the 9th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T10">The type of the 10th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T11">The type of the 11th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T12">The type of the 12th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T13">The type of the 13th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T14">The type of the 14th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T15">The type of the 15th parameter of <paramref name="action"/>.</typeparam>
            <typeparam name="T16">The type of the 16th parameter of <paramref name="action"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Moth.Tasks.TaskQueue"/> has been disposed.</exception>
        </member>
        <member name="T:Moth.Tasks.TaskWithHandle`1">
            <summary>
            Encapsulates a task enqueued with a <see cref="T:Moth.Tasks.TaskHandle"/>.
            </summary>
            <typeparam name="T">Type of task.</typeparam>
        </member>
        <member name="M:Moth.Tasks.TaskWithHandle`1.#ctor(Moth.Tasks.TaskQueue,`0@,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.TaskWithHandle`1"/> struct.
            </summary>
            <param name="queue">Reference to the <see cref="T:Moth.Tasks.TaskQueue"/> in which the task is enqueued.</param>
            <param name="task">Task data.</param>
            <param name="handleID">ID of handle.</param>
        </member>
        <member name="M:Moth.Tasks.TaskWithHandle`1.Run">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.TaskWithHandle`1.Dispose">
            <summary>
            Notify handle that task was completed.
            </summary>
        </member>
        <member name="T:Moth.Tasks.DisposableTaskWithHandle`1">
            <summary>
            Encapsulates a task which implements <see cref="T:System.IDisposable"/>, enqueued with a <see cref="T:Moth.Tasks.TaskHandle"/>.
            </summary>
            <typeparam name="T">Type of task.</typeparam>
        </member>
        <member name="M:Moth.Tasks.DisposableTaskWithHandle`1.#ctor(Moth.Tasks.TaskQueue,`0@,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.DisposableTaskWithHandle`1"/> struct.
            </summary>
            <param name="queue">Reference to the <see cref="T:Moth.Tasks.TaskQueue"/> in which the task is enqueued.</param>
            <param name="task">Task data.</param>
            <param name="handleID">ID of handle.</param>
        </member>
        <member name="M:Moth.Tasks.DisposableTaskWithHandle`1.Run">
            <inheritdoc/>
        </member>
        <member name="M:Moth.Tasks.DisposableTaskWithHandle`1.Dispose">
            <summary>
            Dispose of encapsulated task, and notify handle that task was completed.
            </summary>
        </member>
        <member name="T:Moth.Tasks.Worker">
            <summary>
            Encapsulates a <see cref="T:System.Threading.Thread"/> running in the background, executing tasks from a <see cref="T:Moth.Tasks.TaskQueue"/>.
            </summary>
            <remarks>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.Worker.#ctor(Moth.Tasks.TaskQueue,System.Boolean,System.Boolean,Moth.Tasks.ProfilerProvider,System.EventHandler{Moth.Tasks.TaskExceptionEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.Worker"/> class.
            </summary>
            <remarks>
            The <see cref="T:Moth.Tasks.Worker"/> will start executing tasks automatically.
            </remarks>
            <param name="taskQueue">The <see cref="T:Moth.Tasks.TaskQueue"/> that the <see cref="T:Moth.Tasks.Worker"/> will execute tasks from.</param>
            <param name="disposeTaskQueue">Determines whether the <see cref="T:Moth.Tasks.TaskQueue"/> supplied with <paramref name="taskQueue"/> is disposed when <see cref="M:Moth.Tasks.Worker.Dispose"/> is called.</param>
            <param name="isBackground">Defines the <see cref="P:System.Threading.Thread.IsBackground"/> property of the internal thread.</param>
            <param name="profilerProvider">A <see cref="T:Moth.Tasks.ProfilerProvider"/> which may provide an <see cref="T:Moth.Tasks.IProfiler"/> for the <see cref="T:Moth.Tasks.Worker"/>. May be <see langword="null"/>.</param>
            <param name="exceptionEventHandler">Method invoked if a task throws an exception. May be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taskQueue"/> cannot be null.</exception>
        </member>
        <member name="M:Moth.Tasks.Worker.#ctor(Moth.Tasks.TaskQueue,System.Boolean,System.Boolean,Moth.Tasks.IProfiler,System.EventHandler{Moth.Tasks.TaskExceptionEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.Worker"/> class.
            </summary>
            <remarks>
            The <see cref="T:Moth.Tasks.Worker"/> will start executing tasks automatically.
            </remarks>
            <param name="taskQueue">The <see cref="T:Moth.Tasks.TaskQueue"/> that the <see cref="T:Moth.Tasks.Worker"/> will execute tasks from.</param>
            <param name="disposeTaskQueue">Determines whether the <see cref="T:Moth.Tasks.TaskQueue"/> supplied with <paramref name="taskQueue"/> is disposed when <see cref="M:Moth.Tasks.Worker.Dispose"/> is called.</param>
            <param name="isBackground">Defines the <see cref="P:System.Threading.Thread.IsBackground"/> property of the internal thread.</param>
            <param name="profiler"><see cref="T:Moth.Tasks.IProfiler"/> used to profile tasks. May be <see langword="null"/>.</param>
            <param name="exceptionEventHandler">Method invoked if a task throws an exception. May be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taskQueue"/> cannot be null.</exception>
        </member>
        <member name="M:Moth.Tasks.Worker.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Moth.Tasks.Worker"/> class.
            </summary>
        </member>
        <member name="P:Moth.Tasks.Worker.IsRunning">
            <summary>
            Gets a value indicating whether the thread is running.
            </summary>
            <remarks>
            May be <see langword="true"/> for a short while even after <see cref="M:Moth.Tasks.Worker.Dispose"/> is called.
            </remarks>
        </member>
        <member name="P:Moth.Tasks.Worker.Tasks">
            <summary>
            The <see cref="T:Moth.Tasks.TaskQueue"/> of which the worker is executing tasks from.
            </summary>
        </member>
        <member name="M:Moth.Tasks.Worker.Dispose">
            <summary>
            Sends a signal to shutdown the thread. Also disposes of <see cref="P:Moth.Tasks.Worker.Tasks"/> if specified in <see cref="T:Moth.Tasks.Worker"/> constructor.
            </summary>
        </member>
        <member name="M:Moth.Tasks.Worker.Dispose(System.Boolean)">
            <summary>
            Sends a signal to shutdown the thread. Also disposes of <see cref="P:Moth.Tasks.Worker.Tasks"/> if specified in <see cref="T:Moth.Tasks.Worker"/> constructor.
            </summary>
            <param name="disposing"><see langword="true"/> if called from <see cref="M:Moth.Tasks.Worker.Dispose"/>, <see langword="false"/> if called from finalizer.</param>
        </member>
        <member name="T:Moth.Tasks.WorkerGroup">
            <summary>
            A group of <see cref="T:Moth.Tasks.Worker"/>s, executing tasks from a shared <see cref="T:Moth.Tasks.TaskQueue"/>.
            </summary>
            <remarks>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.#ctor(System.Int32,Moth.Tasks.TaskQueue,System.Boolean,System.Boolean,System.EventHandler{Moth.Tasks.TaskExceptionEventArgs},Moth.Tasks.ProfilerProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Moth.Tasks.WorkerGroup"/> class.
            </summary>
            <param name="workerCount">Number of workers. Must be greater than zero.</param>
            <param name="taskQueue">The <see cref="T:Moth.Tasks.TaskQueue"/> of which the workers will be executing tasks from.</param>
            <param name="disposeTaskQueue">Determines whether the <see cref="T:Moth.Tasks.TaskQueue"/> supplied with <paramref name="taskQueue"/> is disposed when <see cref="M:Moth.Tasks.WorkerGroup.Dispose"/> is called.</param>
            <param name="isBackground">Defines the <see cref="P:System.Threading.Thread.IsBackground"/> property of the internal thread of each <see cref="T:Moth.Tasks.Worker"/>.</param>
            <param name="exceptionEventHandler">Method invoked if a task throws an exception. May be <see langword="null"/>.</param>
            <param name="profilerProvider">A <see cref="T:Moth.Tasks.ProfilerProvider"/> which may provide an <see cref="T:Moth.Tasks.IProfiler"/> each <see cref="T:Moth.Tasks.Worker"/>. May be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="workerCount"/> must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="taskQueue"/> cannot be null.</exception>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Moth.Tasks.WorkerGroup"/> class.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerGroup.Tasks">
            <summary>
            The <see cref="T:Moth.Tasks.TaskQueue"/> of which the workers are executing tasks from.
            </summary>
        </member>
        <member name="P:Moth.Tasks.WorkerGroup.WorkerCount">
            <summary>
            Get or set the number of <see cref="T:Moth.Tasks.Worker"/>s in this <see cref="T:Moth.Tasks.WorkerGroup"/>. Must be greater than zero.
            </summary>
            <remarks>
            The <see cref="T:Moth.Tasks.ProfilerProvider"/> and <see cref="T:System.EventHandler`1"/> provided in the <see cref="T:Moth.Tasks.WorkerGroup"/> constructor will be used to initialize any new <see cref="T:Moth.Tasks.Worker"/>s.
            </remarks>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.Dispose">
            <summary>
            Signals all workers to shutdown. Also disposes of <see cref="P:Moth.Tasks.WorkerGroup.Tasks"/> if specified in <see cref="T:Moth.Tasks.WorkerGroup"/> constructor.
            </summary>
        </member>
        <member name="M:Moth.Tasks.WorkerGroup.Dispose(System.Boolean)">
            <summary>
            Signals all workers to shutdown. Also disposes of <see cref="P:Moth.Tasks.WorkerGroup.Tasks"/> if specified in <see cref="T:Moth.Tasks.WorkerGroup"/> constructor.
            </summary>
            <param name="disposing"><see langword="true"/> if called from <see cref="M:Moth.Tasks.WorkerGroup.Dispose"/>, <see langword="false"/> if called from finalizer.</param>
        </member>
    </members>
</doc>
