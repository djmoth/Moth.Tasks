namespace Moth.Tasks
{
    using System;
    using System.Runtime.InteropServices;

    /* ---------------------------------------- *
     * Generated by DelegateTask.tt T4 template *
     * This file should not be edited manually. *
     * ---------------------------------------- */

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with no parameters.
    /// </summary>
    public readonly struct DelegateTask : ITask
    {
        private readonly Action action;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action"/> to invoke on <see cref="Run"/>.</param>
        public DelegateTask (Action action) => this.action = action;

        /// <summary>
        /// Invokes the encapsulated <see cref="Action"/>.
        /// </summary>
        public void Run () => action ();
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 1 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1> : ITask
    {
        private readonly Action<T1> action;
        private readonly T1 arg1;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1> action, T1 arg1)
        {
            this.action = action;
            this.arg1 = arg1;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 2 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2> : ITask
    {
        private readonly Action<T1, T2> action;
        private readonly T1 arg1;
        private readonly T2 arg2;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2> action, T1 arg1, T2 arg2)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 3 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3> : ITask
    {
        private readonly Action<T1, T2, T3> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 4 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4> : ITask
    {
        private readonly Action<T1, T2, T3, T4> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 5 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 6 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 7 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 8 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 9 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8, T9> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8, T9}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 10 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 11 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 12 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 13 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    /// <typeparam name="T13">Type of parameter 13.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;
        private readonly T13 arg13;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
            this.arg13 = arg13;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 14 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    /// <typeparam name="T13">Type of parameter 13.</typeparam>
    /// <typeparam name="T14">Type of parameter 14.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;
        private readonly T13 arg13;
        private readonly T14 arg14;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
            this.arg13 = arg13;
            this.arg14 = arg14;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 15 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    /// <typeparam name="T13">Type of parameter 13.</typeparam>
    /// <typeparam name="T14">Type of parameter 14.</typeparam>
    /// <typeparam name="T15">Type of parameter 15.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;
        private readonly T13 arg13;
        private readonly T14 arg14;
        private readonly T15 arg15;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
            this.arg13 = arg13;
            this.arg14 = arg14;
            this.arg15 = arg15;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    }

    /// <summary>
    /// Task encapsulating an <see cref="Action"/> with 16 parameters.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    /// <typeparam name="T13">Type of parameter 13.</typeparam>
    /// <typeparam name="T14">Type of parameter 14.</typeparam>
    /// <typeparam name="T15">Type of parameter 15.</typeparam>
    /// <typeparam name="T16">Type of parameter 16.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public readonly struct DelegateTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ITask
    {
        private readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;
        private readonly T13 arg13;
        private readonly T14 arg14;
        private readonly T15 arg15;
        private readonly T16 arg16;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelegateTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16}"/> to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg16">Argument 16 to invoke <paramref name="action"/> with.</param>
        public DelegateTask (Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
            this.arg13 = arg13;
            this.arg14 = arg14;
            this.arg15 = arg15;
            this.arg16 = arg16;
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="Action{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16}"/> with the provided arguments.
        /// </summary>
        public void Run () => action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    }
}