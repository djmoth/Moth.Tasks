namespace Moth.Tasks
{
    using System;
    using System.Runtime.InteropServices;

    /* ----------------------------------------------- *
     * Generated by FunctionPointerTask.tt T4 template *
     *     This file should not be edited manually.    *
     * ----------------------------------------------- */

    /// <summary>
    /// Task encapsulating a delegate*{void} function pointer.
    /// </summary>
    public unsafe readonly struct FunctionPointerTask : ITask<Unit, Unit>
    {
        private readonly delegate*<void> function;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask"/> struct.
        /// </summary>
        /// The <param name="function">delegate*{void} to invoke on <see cref="Run"/>.</param>
        public FunctionPointerTask (delegate*<void> function) => this.function = function;

        /// <summary>
        /// Invokes the encapsulated delegate*{void}.
        /// </summary>
        public Unit Run (Unit _)
        {
            function ();
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, void> action;
        private readonly T1 arg1;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, void> action, T1 arg1)
        {
            this.action = action;
            this.arg1 = arg1;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, void> action, T1 arg1, T2 arg2)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, void> action, T1 arg1, T2 arg2, T3 arg3)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    /// <typeparam name="T13">Type of parameter 13.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;
        private readonly T13 arg13;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
            this.arg13 = arg13;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    /// <typeparam name="T13">Type of parameter 13.</typeparam>
    /// <typeparam name="T14">Type of parameter 14.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;
        private readonly T13 arg13;
        private readonly T14 arg14;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
            this.arg13 = arg13;
            this.arg14 = arg14;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    /// <typeparam name="T13">Type of parameter 13.</typeparam>
    /// <typeparam name="T14">Type of parameter 14.</typeparam>
    /// <typeparam name="T15">Type of parameter 15.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;
        private readonly T13 arg13;
        private readonly T14 arg14;
        private readonly T15 arg15;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
            this.arg13 = arg13;
            this.arg14 = arg14;
            this.arg15 = arg15;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
            return default;
        }
    }

    /// <summary>
    /// Task encapsulating a delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void} function pointer.
    /// </summary>
    /// <typeparam name="T1">Type of parameter 1.</typeparam>
    /// <typeparam name="T2">Type of parameter 2.</typeparam>
    /// <typeparam name="T3">Type of parameter 3.</typeparam>
    /// <typeparam name="T4">Type of parameter 4.</typeparam>
    /// <typeparam name="T5">Type of parameter 5.</typeparam>
    /// <typeparam name="T6">Type of parameter 6.</typeparam>
    /// <typeparam name="T7">Type of parameter 7.</typeparam>
    /// <typeparam name="T8">Type of parameter 8.</typeparam>
    /// <typeparam name="T9">Type of parameter 9.</typeparam>
    /// <typeparam name="T10">Type of parameter 10.</typeparam>
    /// <typeparam name="T11">Type of parameter 11.</typeparam>
    /// <typeparam name="T12">Type of parameter 12.</typeparam>
    /// <typeparam name="T13">Type of parameter 13.</typeparam>
    /// <typeparam name="T14">Type of parameter 14.</typeparam>
    /// <typeparam name="T15">Type of parameter 15.</typeparam>
    /// <typeparam name="T16">Type of parameter 16.</typeparam>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ITask<Unit, Unit>
    {
        private readonly delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void> action;
        private readonly T1 arg1;
        private readonly T2 arg2;
        private readonly T3 arg3;
        private readonly T4 arg4;
        private readonly T5 arg5;
        private readonly T6 arg6;
        private readonly T7 arg7;
        private readonly T8 arg8;
        private readonly T9 arg9;
        private readonly T10 arg10;
        private readonly T11 arg11;
        private readonly T12 arg12;
        private readonly T13 arg13;
        private readonly T14 arg14;
        private readonly T15 arg15;
        private readonly T16 arg16;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16}"/> struct.
        /// </summary>
        /// <param name="action">delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void} to invoke on <see cref="Run"/>.</param>
        /// <param name="arg1">Argument 1 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg2">Argument 2 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg3">Argument 3 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg4">Argument 4 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg5">Argument 5 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg6">Argument 6 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg7">Argument 7 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg8">Argument 8 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg9">Argument 9 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg10">Argument 10 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg11">Argument 11 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg12">Argument 12 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg13">Argument 13 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg14">Argument 14 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg15">Argument 15 to invoke <paramref name="action"/> with.</param>
        /// <param name="arg16">Argument 16 to invoke <paramref name="action"/> with.</param>
        public FunctionPointerTask (delegate*<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
        {
            this.action = action;
            this.arg1 = arg1;
            this.arg2 = arg2;
            this.arg3 = arg3;
            this.arg4 = arg4;
            this.arg5 = arg5;
            this.arg6 = arg6;
            this.arg7 = arg7;
            this.arg8 = arg8;
            this.arg9 = arg9;
            this.arg10 = arg10;
            this.arg11 = arg11;
            this.arg12 = arg12;
            this.arg13 = arg13;
            this.arg14 = arg14;
            this.arg15 = arg15;
            this.arg16 = arg16;
        }

        /// <summary>
        /// Invokes the encapsulated delegate*{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, void} with the provided arguments.
        /// </summary>
        public Unit Run (Unit _)
        {
            action (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
            return default;
        }
    }
}