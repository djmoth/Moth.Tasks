<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Moth.Tasks
{
    using System;
    using System.Runtime.InteropServices;

    /* ---------------------------------------- *
     * Generated by DelegateTask.tt T4 template *
     * This file should not be edited manually. *
     * ---------------------------------------- */

    /// <summary>
    /// Task encapsulating a <param name="function"><see cref="delegate*{void}"/> function pointer.
    /// </summary>
    public unsafe readonly struct FunctionPointerTask : ITask
    {
        private readonly delegate*<void> function;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask"/> struct.
        /// </summary>
        /// The <param name="function"><see cref="delegate*{void}"/> to invoke on <see cref="Run"/>.</param>
        public FunctionPointerTask (delegate*<void> function) => this.function = function;

        /// <summary>
        /// Invokes the encapsulated <see cref="delegate*{void}"/>.
        /// </summary>
        public void Run () => function ();
    }
<# int maxParameterCount = 16;
for (int i = 1; i <= maxParameterCount; i++)
{
    string typeParameters = "T1";

    for (int t = 2; t <= i; t++)
        typeParameters += ", T" + t.ToString ();
#>

    /// <summary>
    /// Task encapsulating an <see cref="delegate*{void}"/> with <#=i#> parameters.
    /// </summary>
<# for (int t = 1; t <= i; t++) WriteLine ($"    /// <typeparam name=\"T{t}\">Type of parameter {t}.</typeparam>");#>
    [StructLayout (LayoutKind.Auto)]
    public unsafe readonly struct FunctionPointerTask<<#=typeParameters#>> : ITask
    {
        private readonly delegate*<<#=typeParameters#>, void> action;
<# for (int t = 1; t <= i; t++) WriteLine ($"        private readonly T{t} arg{t};");#>

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionPointerTask{<#=typeParameters#>}"/> struct.
        /// </summary>
        /// <param name="action"><see cref="delegate*{<#=typeParameters#>, void}"/> to invoke on <see cref="Run"/>.</param>
<# string paramList = "";
for (int t = 1; t <= i; t++) 
{
    paramList += ", T" + t.ToString () + " arg" + t.ToString ();
    WriteLine ($"        /// <param name=\"arg{t}\">Argument {t} to invoke <paramref name=\"action\"/> with.</param>");
}#>
        public FunctionPointerTask (delegate*<<#=typeParameters#>, void> action<#=paramList#>)
        {
            this.action = action;
<# for (int t = 1; t <= i; t++) WriteLine ($"            this.arg{t} = arg{t};");#>
        }

        /// <summary>
        /// Invokes the encapsulated <see cref="delegate*{<#=typeParameters#>, void}"/> with the provided arguments.
        /// </summary>
<# string argList = "arg1";
for (int t = 2; t <= i; t++)
    argList += ", arg" + t.ToString ();#>
        public void Run () => action (<#=argList#>);
    }
<#}#>
}